"""autogenerated by genpy from experiment_msgs/MoveRelative.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveRelative(genpy.Message):
  _md5sum = "0b694dc2c4bde1073987904345c07b8b"
  _type = "experiment_msgs/MoveRelative"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool 		tracking
string 		frameidOriginPosition # 'Plate' or 'Robot' or 'Fly'
string 		frameidOriginAngle # 'Plate' or 'Robot' or 'Fly'
float64 	distance
float64 	angle
string 		angleType # 'random' or 'constant'
float64 	speed
string 		speedType # 'random' or 'constant'
float64 	tolerance


"""
  __slots__ = ['tracking','frameidOriginPosition','frameidOriginAngle','distance','angle','angleType','speed','speedType','tolerance']
  _slot_types = ['bool','string','string','float64','float64','string','float64','string','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tracking,frameidOriginPosition,frameidOriginAngle,distance,angle,angleType,speed,speedType,tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveRelative, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tracking is None:
        self.tracking = False
      if self.frameidOriginPosition is None:
        self.frameidOriginPosition = ''
      if self.frameidOriginAngle is None:
        self.frameidOriginAngle = ''
      if self.distance is None:
        self.distance = 0.
      if self.angle is None:
        self.angle = 0.
      if self.angleType is None:
        self.angleType = ''
      if self.speed is None:
        self.speed = 0.
      if self.speedType is None:
        self.speedType = ''
      if self.tolerance is None:
        self.tolerance = 0.
    else:
      self.tracking = False
      self.frameidOriginPosition = ''
      self.frameidOriginAngle = ''
      self.distance = 0.
      self.angle = 0.
      self.angleType = ''
      self.speed = 0.
      self.speedType = ''
      self.tolerance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.tracking))
      _x = self.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.distance, _x.angle))
      _x = self.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.speed))
      _x = self.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.tolerance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.tracking,) = _struct_B.unpack(str[start:end])
      self.tracking = bool(self.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.distance, _x.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.angleType = str[start:end].decode('utf-8')
      else:
        self.angleType = str[start:end]
      start = end
      end += 8
      (self.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speedType = str[start:end].decode('utf-8')
      else:
        self.speedType = str[start:end]
      start = end
      end += 8
      (self.tolerance,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.tracking))
      _x = self.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.distance, _x.angle))
      _x = self.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.speed))
      _x = self.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.tolerance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.tracking,) = _struct_B.unpack(str[start:end])
      self.tracking = bool(self.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.distance, _x.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.angleType = str[start:end].decode('utf-8')
      else:
        self.angleType = str[start:end]
      start = end
      end += 8
      (self.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speedType = str[start:end].decode('utf-8')
      else:
        self.speedType = str[start:end]
      start = end
      end += 8
      (self.tolerance,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
