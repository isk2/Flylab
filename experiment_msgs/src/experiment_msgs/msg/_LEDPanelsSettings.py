"""autogenerated by genpy from experiment_msgs/LEDPanelsSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LEDPanelsSettings(genpy.Message):
  _md5sum = "73d94f85d10ef5c8674999d3ba4543d7"
  _type = "experiment_msgs/LEDPanelsSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool                    enabled
string                  command                 # 'None', 'trackposition' (panel position follows fly position), 'trackorientation' (panel position follows fly angle). 
int32                   idPattern               # The pattern number to show.
geometry_msgs/Point     origin
string                  frame_id                # Which frame to track.
string                  statefilterHi   		
string                  statefilterLo	 		# Contains a string to be interpreted as a dict.  Operation will only be enabled for fly states between these two entries.
string                  statefilterCriteria	    # "inclusive" or "exclusive"


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['enabled','command','idPattern','origin','frame_id','statefilterHi','statefilterLo','statefilterCriteria']
  _slot_types = ['bool','string','int32','geometry_msgs/Point','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enabled,command,idPattern,origin,frame_id,statefilterHi,statefilterLo,statefilterCriteria

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LEDPanelsSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enabled is None:
        self.enabled = False
      if self.command is None:
        self.command = ''
      if self.idPattern is None:
        self.idPattern = 0
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.frame_id is None:
        self.frame_id = ''
      if self.statefilterHi is None:
        self.statefilterHi = ''
      if self.statefilterLo is None:
        self.statefilterLo = ''
      if self.statefilterCriteria is None:
        self.statefilterCriteria = ''
    else:
      self.enabled = False
      self.command = ''
      self.idPattern = 0
      self.origin = geometry_msgs.msg.Point()
      self.frame_id = ''
      self.statefilterHi = ''
      self.statefilterLo = ''
      self.statefilterCriteria = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.enabled))
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.idPattern, _x.origin.x, _x.origin.y, _x.origin.z))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 1
      (self.enabled,) = _struct_B.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.idPattern, _x.origin.x, _x.origin.y, _x.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.statefilterCriteria = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.enabled))
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.idPattern, _x.origin.x, _x.origin.y, _x.origin.z))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 1
      (self.enabled,) = _struct_B.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.idPattern, _x.origin.x, _x.origin.y, _x.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.statefilterCriteria = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_i3d = struct.Struct("<i3d")
