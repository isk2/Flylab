"""autogenerated by genpy from experiment_msgs/TrialSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import patterngen.msg
import experiment_msgs.msg

class TrialSettings(genpy.Message):
  _md5sum = "b35f9859353b5050f40fac02e468b7f1"
  _type = "experiment_msgs/TrialSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# All run concurrently:  (robot) and (lasergalvos) and (ledpanels).  Any terminate -> all terminate.
RobotSettings 		       robot
LasergalvosSettings        lasergalvos
LEDPanelsSettings          ledpanels



================================================================================
MSG: experiment_msgs/RobotSettings
bool            enabled
MoveSettings    move
HomeSettings    home

================================================================================
MSG: experiment_msgs/MoveSettings
string                    mode  # 'pattern' or 'relative'
MoveRelative              relative
patterngen/MsgPattern     pattern


================================================================================
MSG: experiment_msgs/MoveRelative
bool 		tracking
string 		frameidOriginPosition # 'Plate' or 'Robot' or 'Fly'
string 		frameidOriginAngle # 'Plate' or 'Robot' or 'Fly'
float64 	distance
float64 	angle
string 		angleType # 'random' or 'constant'
float64 	speed
string 		speedType # 'random' or 'constant'
float64 	tolerance


================================================================================
MSG: patterngen/MsgPattern
string                frameidPosition   # The frame to which the pattern position applies.
string                frameidAngle      # The frame to which the pattern angle applies.
string                shape             # 'constant' or 'square' or 'circle' or 'flylogo' or 'spiral' or 'ramp' or 'grid' or 'raster' or 'hilbert' or 'peano' or 'none' or 'bypoints'
float64               hzPattern         # Frequency of the pattern.
float64               hzPoint           # Frequency of points making up the pattern.
int32                 count             # How many times to output the pattern (-1 or N.inf means infinite).
geometry_msgs/Point[] points            # If shape=='bypoints', then this is the list of points to use.
geometry_msgs/Point   size              # (x,y) dimensions.
bool				  preempt           # Should this message restart an in-progress pattern.
float64               param             # An extra shape-dependent parameter, if needed (hilbert->level, peano->level, spiral->pitch, raster->gridpitch).
int32                 direction         # Step forward (+1) or reverse (-1) through the pattern points.
bool				  isDirty			# Set internally to True when the points need regenerating.
 


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: experiment_msgs/HomeSettings
bool          enabled
float64       x
float64       y
float64       speed
float64       tolerance



================================================================================
MSG: experiment_msgs/LasergalvosSettings
bool 						enabled
patterngen/MsgPattern[] 	pattern_list
string[]                    statefilterHi_list   		# These lists should either be empty, or contain as many entries as patterns.
string[]                    statefilterLo_list	 		# Contains strings to be interpreted as dicts.  Pattern will only be enabled for fly states between these two entries.
string[]                    statefilterCriteria_list	# "inclusive" or "exclusive"


================================================================================
MSG: experiment_msgs/LEDPanelsSettings
bool                    enabled
string                  command                 # 'None', 'trackposition' (panel position follows fly position), 'trackorientation' (panel position follows fly angle). 
int32                   idPattern               # The pattern number to show.
geometry_msgs/Point     origin
string                  frame_id                # Which frame to track.
string                  statefilterHi   		
string                  statefilterLo	 		# Contains a string to be interpreted as a dict.  Operation will only be enabled for fly states between these two entries.
string                  statefilterCriteria	    # "inclusive" or "exclusive"


"""
  __slots__ = ['robot','lasergalvos','ledpanels']
  _slot_types = ['experiment_msgs/RobotSettings','experiment_msgs/LasergalvosSettings','experiment_msgs/LEDPanelsSettings']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot,lasergalvos,ledpanels

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrialSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot is None:
        self.robot = experiment_msgs.msg.RobotSettings()
      if self.lasergalvos is None:
        self.lasergalvos = experiment_msgs.msg.LasergalvosSettings()
      if self.ledpanels is None:
        self.ledpanels = experiment_msgs.msg.LEDPanelsSettings()
    else:
      self.robot = experiment_msgs.msg.RobotSettings()
      self.lasergalvos = experiment_msgs.msg.LasergalvosSettings()
      self.ledpanels = experiment_msgs.msg.LEDPanelsSettings()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.robot.enabled))
      _x = self.robot.move.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.robot.move.relative.tracking))
      _x = self.robot.move.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.move.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.robot.move.relative.distance, _x.robot.move.relative.angle))
      _x = self.robot.move.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.robot.move.relative.speed))
      _x = self.robot.move.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.robot.move.relative.tolerance))
      _x = self.robot.move.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.move.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.move.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.robot.move.pattern.hzPattern, _x.robot.move.pattern.hzPoint, _x.robot.move.pattern.count))
      length = len(self.robot.move.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot.move.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdi2B4dB.pack(_x.robot.move.pattern.size.x, _x.robot.move.pattern.size.y, _x.robot.move.pattern.size.z, _x.robot.move.pattern.preempt, _x.robot.move.pattern.param, _x.robot.move.pattern.direction, _x.robot.move.pattern.isDirty, _x.robot.home.enabled, _x.robot.home.x, _x.robot.home.y, _x.robot.home.speed, _x.robot.home.tolerance, _x.lasergalvos.enabled))
      length = len(self.lasergalvos.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.pattern_list:
        _x = val1.frameidPosition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frameidAngle
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v1 = val1.size
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_BdiB.pack(_x.preempt, _x.param, _x.direction, _x.isDirty))
      length = len(self.lasergalvos.statefilterHi_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.statefilterHi_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.lasergalvos.statefilterLo_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.statefilterLo_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.lasergalvos.statefilterCriteria_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.statefilterCriteria_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.ledpanels.enabled))
      _x = self.ledpanels.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.ledpanels.idPattern, _x.ledpanels.origin.x, _x.ledpanels.origin.y, _x.ledpanels.origin.z))
      _x = self.ledpanels.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ledpanels.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ledpanels.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ledpanels.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robot is None:
        self.robot = experiment_msgs.msg.RobotSettings()
      if self.lasergalvos is None:
        self.lasergalvos = experiment_msgs.msg.LasergalvosSettings()
      if self.ledpanels is None:
        self.ledpanels = experiment_msgs.msg.LEDPanelsSettings()
      end = 0
      start = end
      end += 1
      (self.robot.enabled,) = _struct_B.unpack(str[start:end])
      self.robot.enabled = bool(self.robot.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.mode = str[start:end].decode('utf-8')
      else:
        self.robot.move.mode = str[start:end]
      start = end
      end += 1
      (self.robot.move.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.robot.move.relative.tracking = bool(self.robot.move.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.robot.move.relative.distance, _x.robot.move.relative.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.angleType = str[start:end]
      start = end
      end += 8
      (self.robot.move.relative.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.speedType = str[start:end]
      start = end
      end += 8
      (self.robot.move.relative.tolerance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.robot.move.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.robot.move.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.robot.move.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.robot.move.pattern.hzPattern, _x.robot.move.pattern.hzPoint, _x.robot.move.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot.move.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.robot.move.pattern.points.append(val1)
      _x = self
      start = end
      end += 72
      (_x.robot.move.pattern.size.x, _x.robot.move.pattern.size.y, _x.robot.move.pattern.size.z, _x.robot.move.pattern.preempt, _x.robot.move.pattern.param, _x.robot.move.pattern.direction, _x.robot.move.pattern.isDirty, _x.robot.home.enabled, _x.robot.home.x, _x.robot.home.y, _x.robot.home.speed, _x.robot.home.tolerance, _x.lasergalvos.enabled,) = _struct_3dBdi2B4dB.unpack(str[start:end])
      self.robot.move.pattern.preempt = bool(self.robot.move.pattern.preempt)
      self.robot.move.pattern.isDirty = bool(self.robot.move.pattern.isDirty)
      self.robot.home.enabled = bool(self.robot.home.enabled)
      self.lasergalvos.enabled = bool(self.lasergalvos.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidPosition = str[start:end].decode('utf-8')
        else:
          val1.frameidPosition = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidAngle = str[start:end].decode('utf-8')
        else:
          val1.frameidAngle = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _v2 = val1.size
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.preempt, _x.param, _x.direction, _x.isDirty,) = _struct_BdiB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        val1.isDirty = bool(val1.isDirty)
        self.lasergalvos.pattern_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.statefilterHi_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.lasergalvos.statefilterHi_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.statefilterLo_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.lasergalvos.statefilterLo_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.statefilterCriteria_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.lasergalvos.statefilterCriteria_list.append(val1)
      start = end
      end += 1
      (self.ledpanels.enabled,) = _struct_B.unpack(str[start:end])
      self.ledpanels.enabled = bool(self.ledpanels.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.command = str[start:end].decode('utf-8')
      else:
        self.ledpanels.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.ledpanels.idPattern, _x.ledpanels.origin.x, _x.ledpanels.origin.y, _x.ledpanels.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.frame_id = str[start:end].decode('utf-8')
      else:
        self.ledpanels.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.ledpanels.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.ledpanels.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.ledpanels.statefilterCriteria = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.robot.enabled))
      _x = self.robot.move.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.robot.move.relative.tracking))
      _x = self.robot.move.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.move.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.robot.move.relative.distance, _x.robot.move.relative.angle))
      _x = self.robot.move.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.robot.move.relative.speed))
      _x = self.robot.move.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.robot.move.relative.tolerance))
      _x = self.robot.move.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.move.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.move.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.robot.move.pattern.hzPattern, _x.robot.move.pattern.hzPoint, _x.robot.move.pattern.count))
      length = len(self.robot.move.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot.move.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdi2B4dB.pack(_x.robot.move.pattern.size.x, _x.robot.move.pattern.size.y, _x.robot.move.pattern.size.z, _x.robot.move.pattern.preempt, _x.robot.move.pattern.param, _x.robot.move.pattern.direction, _x.robot.move.pattern.isDirty, _x.robot.home.enabled, _x.robot.home.x, _x.robot.home.y, _x.robot.home.speed, _x.robot.home.tolerance, _x.lasergalvos.enabled))
      length = len(self.lasergalvos.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.pattern_list:
        _x = val1.frameidPosition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frameidAngle
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = val1.size
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_BdiB.pack(_x.preempt, _x.param, _x.direction, _x.isDirty))
      length = len(self.lasergalvos.statefilterHi_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.statefilterHi_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.lasergalvos.statefilterLo_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.statefilterLo_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.lasergalvos.statefilterCriteria_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lasergalvos.statefilterCriteria_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.ledpanels.enabled))
      _x = self.ledpanels.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.ledpanels.idPattern, _x.ledpanels.origin.x, _x.ledpanels.origin.y, _x.ledpanels.origin.z))
      _x = self.ledpanels.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ledpanels.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ledpanels.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ledpanels.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robot is None:
        self.robot = experiment_msgs.msg.RobotSettings()
      if self.lasergalvos is None:
        self.lasergalvos = experiment_msgs.msg.LasergalvosSettings()
      if self.ledpanels is None:
        self.ledpanels = experiment_msgs.msg.LEDPanelsSettings()
      end = 0
      start = end
      end += 1
      (self.robot.enabled,) = _struct_B.unpack(str[start:end])
      self.robot.enabled = bool(self.robot.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.mode = str[start:end].decode('utf-8')
      else:
        self.robot.move.mode = str[start:end]
      start = end
      end += 1
      (self.robot.move.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.robot.move.relative.tracking = bool(self.robot.move.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.robot.move.relative.distance, _x.robot.move.relative.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.angleType = str[start:end]
      start = end
      end += 8
      (self.robot.move.relative.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.robot.move.relative.speedType = str[start:end]
      start = end
      end += 8
      (self.robot.move.relative.tolerance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.robot.move.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.robot.move.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.move.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.robot.move.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.robot.move.pattern.hzPattern, _x.robot.move.pattern.hzPoint, _x.robot.move.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot.move.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.robot.move.pattern.points.append(val1)
      _x = self
      start = end
      end += 72
      (_x.robot.move.pattern.size.x, _x.robot.move.pattern.size.y, _x.robot.move.pattern.size.z, _x.robot.move.pattern.preempt, _x.robot.move.pattern.param, _x.robot.move.pattern.direction, _x.robot.move.pattern.isDirty, _x.robot.home.enabled, _x.robot.home.x, _x.robot.home.y, _x.robot.home.speed, _x.robot.home.tolerance, _x.lasergalvos.enabled,) = _struct_3dBdi2B4dB.unpack(str[start:end])
      self.robot.move.pattern.preempt = bool(self.robot.move.pattern.preempt)
      self.robot.move.pattern.isDirty = bool(self.robot.move.pattern.isDirty)
      self.robot.home.enabled = bool(self.robot.home.enabled)
      self.lasergalvos.enabled = bool(self.lasergalvos.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidPosition = str[start:end].decode('utf-8')
        else:
          val1.frameidPosition = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidAngle = str[start:end].decode('utf-8')
        else:
          val1.frameidAngle = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _v4 = val1.size
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.preempt, _x.param, _x.direction, _x.isDirty,) = _struct_BdiB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        val1.isDirty = bool(val1.isDirty)
        self.lasergalvos.pattern_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.statefilterHi_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.lasergalvos.statefilterHi_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.statefilterLo_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.lasergalvos.statefilterLo_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lasergalvos.statefilterCriteria_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.lasergalvos.statefilterCriteria_list.append(val1)
      start = end
      end += 1
      (self.ledpanels.enabled,) = _struct_B.unpack(str[start:end])
      self.ledpanels.enabled = bool(self.ledpanels.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.command = str[start:end].decode('utf-8')
      else:
        self.ledpanels.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.ledpanels.idPattern, _x.ledpanels.origin.x, _x.ledpanels.origin.y, _x.ledpanels.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.frame_id = str[start:end].decode('utf-8')
      else:
        self.ledpanels.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.ledpanels.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.ledpanels.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ledpanels.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.ledpanels.statefilterCriteria = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_BdiB = struct.Struct("<BdiB")
_struct_2d = struct.Struct("<2d")
_struct_3dBdi2B4dB = struct.Struct("<3dBdi2B4dB")
_struct_i3d = struct.Struct("<i3d")
_struct_2di = struct.Struct("<2di")
_struct_3d = struct.Struct("<3d")
