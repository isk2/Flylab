"""autogenerated by genpy from experiment_msgs/MoveSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import patterngen.msg
import experiment_msgs.msg

class MoveSettings(genpy.Message):
  _md5sum = "ba6941ec48798854242671cb10338ce6"
  _type = "experiment_msgs/MoveSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string                    mode  # 'pattern' or 'relative'
MoveRelative              relative
patterngen/MsgPattern     pattern


================================================================================
MSG: experiment_msgs/MoveRelative
bool 		tracking
string 		frameidOriginPosition # 'Plate' or 'Robot' or 'Fly'
string 		frameidOriginAngle    # 'Plate' or 'Robot' or 'Fly'
float64 	distance              # mm
string 		angleType             # 'random' or 'constant'
float64 	angleOffset           # Radians from origin to target.
float64     angleOscMag           # Radian magnitude of the added oscillation.
float64     angleOscFreq          # Hz of the added oscillation.
string 		speedType             # 'random' or 'constant'
float64 	speed                 # mm/sec
float64 	tolerance             # mm


================================================================================
MSG: patterngen/MsgPattern
string                frameidPosition   # The frame to which the pattern position applies.
string                frameidAngle      # The frame to which the pattern angle applies.
string                shape             # 'constant' or 'square' or 'circle' or 'flylogo' or 'spiral' or 'ramp' or 'grid' or 'raster' or 'hilbert' or 'peano' or 'none' or 'bypoints'
float64               hzPattern         # Frequency of the pattern.
float64               hzPoint           # Frequency of points making up the pattern.
int32                 count             # How many times to output the pattern (-1 or N.inf means infinite).
geometry_msgs/Point[] points            # If shape=='bypoints', then this is the list of points to use.
geometry_msgs/Point   size              # (x,y) dimensions.
bool				  preempt           # Should this message restart an in-progress pattern.
float64               param             # An extra shape-dependent parameter, if needed (hilbert->level, peano->level, spiral->pitch, raster->gridpitch).
int32                 direction         # Step forward (+1) or reverse (-1) through the pattern points.
bool				  isDirty			# Set internally to True when the points need regenerating.
 


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['mode','relative','pattern']
  _slot_types = ['string','experiment_msgs/MoveRelative','patterngen/MsgPattern']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,relative,pattern

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = ''
      if self.relative is None:
        self.relative = experiment_msgs.msg.MoveRelative()
      if self.pattern is None:
        self.pattern = patterngen.msg.MsgPattern()
    else:
      self.mode = ''
      self.relative = experiment_msgs.msg.MoveRelative()
      self.pattern = patterngen.msg.MsgPattern()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.relative.tracking))
      _x = self.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.relative.distance))
      _x = self.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.relative.angleOffset, _x.relative.angleOscMag, _x.relative.angleOscFreq))
      _x = self.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.relative.speed, _x.relative.tolerance))
      _x = self.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.pattern.hzPattern, _x.pattern.hzPoint, _x.pattern.count))
      length = len(self.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdiB.pack(_x.pattern.size.x, _x.pattern.size.y, _x.pattern.size.z, _x.pattern.preempt, _x.pattern.param, _x.pattern.direction, _x.pattern.isDirty))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.relative is None:
        self.relative = experiment_msgs.msg.MoveRelative()
      if self.pattern is None:
        self.pattern = patterngen.msg.MsgPattern()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8')
      else:
        self.mode = str[start:end]
      start = end
      end += 1
      (self.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.relative.tracking = bool(self.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.relative.frameidOriginAngle = str[start:end]
      start = end
      end += 8
      (self.relative.distance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.relative.angleType = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.relative.angleOffset, _x.relative.angleOscMag, _x.relative.angleOscFreq,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.relative.speedType = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.relative.speed, _x.relative.tolerance,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.pattern.hzPattern, _x.pattern.hzPoint, _x.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.pattern.points.append(val1)
      _x = self
      start = end
      end += 38
      (_x.pattern.size.x, _x.pattern.size.y, _x.pattern.size.z, _x.pattern.preempt, _x.pattern.param, _x.pattern.direction, _x.pattern.isDirty,) = _struct_3dBdiB.unpack(str[start:end])
      self.pattern.preempt = bool(self.pattern.preempt)
      self.pattern.isDirty = bool(self.pattern.isDirty)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.relative.tracking))
      _x = self.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.relative.distance))
      _x = self.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.relative.angleOffset, _x.relative.angleOscMag, _x.relative.angleOscFreq))
      _x = self.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.relative.speed, _x.relative.tolerance))
      _x = self.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.pattern.hzPattern, _x.pattern.hzPoint, _x.pattern.count))
      length = len(self.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdiB.pack(_x.pattern.size.x, _x.pattern.size.y, _x.pattern.size.z, _x.pattern.preempt, _x.pattern.param, _x.pattern.direction, _x.pattern.isDirty))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.relative is None:
        self.relative = experiment_msgs.msg.MoveRelative()
      if self.pattern is None:
        self.pattern = patterngen.msg.MsgPattern()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8')
      else:
        self.mode = str[start:end]
      start = end
      end += 1
      (self.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.relative.tracking = bool(self.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.relative.frameidOriginAngle = str[start:end]
      start = end
      end += 8
      (self.relative.distance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.relative.angleType = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.relative.angleOffset, _x.relative.angleOscMag, _x.relative.angleOscFreq,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.relative.speedType = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.relative.speed, _x.relative.tolerance,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.pattern.hzPattern, _x.pattern.hzPoint, _x.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.pattern.points.append(val1)
      _x = self
      start = end
      end += 38
      (_x.pattern.size.x, _x.pattern.size.y, _x.pattern.size.z, _x.pattern.preempt, _x.pattern.param, _x.pattern.direction, _x.pattern.isDirty,) = _struct_3dBdiB.unpack(str[start:end])
      self.pattern.preempt = bool(self.pattern.preempt)
      self.pattern.isDirty = bool(self.pattern.isDirty)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_3dBdiB = struct.Struct("<3dBdiB")
_struct_2d = struct.Struct("<2d")
_struct_2di = struct.Struct("<2di")
_struct_3d = struct.Struct("<3d")
