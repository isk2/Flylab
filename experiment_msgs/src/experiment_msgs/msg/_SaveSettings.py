"""autogenerated by genpy from experiment_msgs/SaveSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SaveSettings(genpy.Message):
  _md5sum = "8298fd172f8d8390bbb47f3e831e2d08"
  _type = "experiment_msgs/SaveSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string   filenamebase           # The first part of the filename, before the timestamp, e.g. 'test'.
string   timestamp              # The timestamp in string form, e.g. '20130309031415'.  This field is set by the code.
bool     csv                    # Should we save the Arenastate to .csv?
bool     bag                    # Should we save system input to .bag?  (i.e. camera/image_rect, etc)
bool     png                    # Should we save image topics to .png files?
bool     onlyWhileTriggered     # Save all the trial data, or just from trial-start to trial-end?
string[] imagetopic_list        # List of image topics to save to .png files (if saving png).

"""
  __slots__ = ['filenamebase','timestamp','csv','bag','png','onlyWhileTriggered','imagetopic_list']
  _slot_types = ['string','string','bool','bool','bool','bool','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       filenamebase,timestamp,csv,bag,png,onlyWhileTriggered,imagetopic_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SaveSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filenamebase is None:
        self.filenamebase = ''
      if self.timestamp is None:
        self.timestamp = ''
      if self.csv is None:
        self.csv = False
      if self.bag is None:
        self.bag = False
      if self.png is None:
        self.png = False
      if self.onlyWhileTriggered is None:
        self.onlyWhileTriggered = False
      if self.imagetopic_list is None:
        self.imagetopic_list = []
    else:
      self.filenamebase = ''
      self.timestamp = ''
      self.csv = False
      self.bag = False
      self.png = False
      self.onlyWhileTriggered = False
      self.imagetopic_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.filenamebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4B.pack(_x.csv, _x.bag, _x.png, _x.onlyWhileTriggered))
      length = len(self.imagetopic_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.imagetopic_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filenamebase = str[start:end].decode('utf-8')
      else:
        self.filenamebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp = str[start:end].decode('utf-8')
      else:
        self.timestamp = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.csv, _x.bag, _x.png, _x.onlyWhileTriggered,) = _struct_4B.unpack(str[start:end])
      self.csv = bool(self.csv)
      self.bag = bool(self.bag)
      self.png = bool(self.png)
      self.onlyWhileTriggered = bool(self.onlyWhileTriggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.imagetopic_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.imagetopic_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.filenamebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4B.pack(_x.csv, _x.bag, _x.png, _x.onlyWhileTriggered))
      length = len(self.imagetopic_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.imagetopic_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filenamebase = str[start:end].decode('utf-8')
      else:
        self.filenamebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp = str[start:end].decode('utf-8')
      else:
        self.timestamp = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.csv, _x.bag, _x.png, _x.onlyWhileTriggered,) = _struct_4B.unpack(str[start:end])
      self.csv = bool(self.csv)
      self.bag = bool(self.bag)
      self.png = bool(self.png)
      self.onlyWhileTriggered = bool(self.onlyWhileTriggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.imagetopic_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.imagetopic_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
