"""autogenerated by genpy from galvodirector/MsgGalvoCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import patterngen.msg

class MsgGalvoCommand(genpy.Message):
  _md5sum = "b7d582278340e1dc0c2908f55fff7424"
  _type = "galvodirector/MsgGalvoCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string[] frameid_target_list
patterngen/MsgPattern[] pattern_list

================================================================================
MSG: patterngen/MsgPattern
string                mode      # 'byshape' or 'bypoints'
string                shape     # 'square' or 'circle' or 'flylogo' or 'spiral'
string                frame     # The frame in which to output the points.
float64               hzPattern # Frequency of the pattern.
float64               hzPoint   # Frequency of points making up the pattern.
int32                 count     # How many times to output the pattern (-1 or N.inf means infinite).
geometry_msgs/Point[] points    # If mode=='bypoints', then this is the list of points to scan.
float64               radius    # Center to max distance.
bool				  preempt   # Should this message restart an in-progress pattern.


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['frameid_target_list','pattern_list']
  _slot_types = ['string[]','patterngen/MsgPattern[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frameid_target_list,pattern_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MsgGalvoCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frameid_target_list is None:
        self.frameid_target_list = []
      if self.pattern_list is None:
        self.pattern_list = []
    else:
      self.frameid_target_list = []
      self.pattern_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.frameid_target_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.frameid_target_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pattern_list:
        _x = val1.mode
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_dB.pack(_x.radius, _x.preempt))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pattern_list is None:
        self.pattern_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frameid_target_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.frameid_target_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mode = str[start:end].decode('utf-8')
        else:
          val1.mode = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame = str[start:end].decode('utf-8')
        else:
          val1.frame = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.radius, _x.preempt,) = _struct_dB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        self.pattern_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.frameid_target_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.frameid_target_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pattern_list:
        _x = val1.mode
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_dB.pack(_x.radius, _x.preempt))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pattern_list is None:
        self.pattern_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frameid_target_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.frameid_target_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mode = str[start:end].decode('utf-8')
        else:
          val1.mode = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame = str[start:end].decode('utf-8')
        else:
          val1.frame = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.radius, _x.preempt,) = _struct_dB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        self.pattern_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_dB = struct.Struct("<dB")
_struct_2di = struct.Struct("<2di")
_struct_3d = struct.Struct("<3d")
