"""autogenerated by genpy from plate_tf/InBounds.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InBounds(genpy.Message):
  _md5sum = "8ec52c16dbacf56e543de6136a368dc1"
  _type = "plate_tf/InBounds"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 bounds_radius
bool robot_in_bounds
bool fly_in_bounds
"""
  __slots__ = ['bounds_radius','robot_in_bounds','fly_in_bounds']
  _slot_types = ['float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bounds_radius,robot_in_bounds,fly_in_bounds

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InBounds, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bounds_radius is None:
        self.bounds_radius = 0.
      if self.robot_in_bounds is None:
        self.robot_in_bounds = False
      if self.fly_in_bounds is None:
        self.fly_in_bounds = False
    else:
      self.bounds_radius = 0.
      self.robot_in_bounds = False
      self.fly_in_bounds = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d2B.pack(_x.bounds_radius, _x.robot_in_bounds, _x.fly_in_bounds))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.bounds_radius, _x.robot_in_bounds, _x.fly_in_bounds,) = _struct_d2B.unpack(str[start:end])
      self.robot_in_bounds = bool(self.robot_in_bounds)
      self.fly_in_bounds = bool(self.fly_in_bounds)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d2B.pack(_x.bounds_radius, _x.robot_in_bounds, _x.fly_in_bounds))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.bounds_radius, _x.robot_in_bounds, _x.fly_in_bounds,) = _struct_d2B.unpack(str[start:end])
      self.robot_in_bounds = bool(self.robot_in_bounds)
      self.fly_in_bounds = bool(self.fly_in_bounds)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d2B = struct.Struct("<d2B")
