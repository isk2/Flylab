"""autogenerated by genpy from experiments/TriggerSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TriggerSettings(genpy.Message):
  _md5sum = "9a6e1dc1d9a86df9b170fb7851a25db1"
  _type = "experiments/TriggerSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool 		enabled
string 		frameidParent 	# 'Plate', 'Robot', 'Fly1', 'Fly2' etc
string 		frameidChild 	
float64 	speedParentMin  # Absolute speed of parent frame.
float64 	speedParentMax
float64 	speedChildMin   # Absolute speed of child frame.
float64 	speedChildMax
float64 	distanceMin     # Distance from parent to child.
float64 	distanceMax
float64 	angleMin		# Angle to child in parent frame.
float64 	angleMax
string  	angleTest		# 'inclusive' or 'exclusive'
bool    	angleTestBilateral
float64 	timeHold
float64 	timeout



"""
  __slots__ = ['enabled','frameidParent','frameidChild','speedParentMin','speedParentMax','speedChildMin','speedChildMax','distanceMin','distanceMax','angleMin','angleMax','angleTest','angleTestBilateral','timeHold','timeout']
  _slot_types = ['bool','string','string','float64','float64','float64','float64','float64','float64','float64','float64','string','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enabled,frameidParent,frameidChild,speedParentMin,speedParentMax,speedChildMin,speedChildMax,distanceMin,distanceMax,angleMin,angleMax,angleTest,angleTestBilateral,timeHold,timeout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TriggerSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enabled is None:
        self.enabled = False
      if self.frameidParent is None:
        self.frameidParent = ''
      if self.frameidChild is None:
        self.frameidChild = ''
      if self.speedParentMin is None:
        self.speedParentMin = 0.
      if self.speedParentMax is None:
        self.speedParentMax = 0.
      if self.speedChildMin is None:
        self.speedChildMin = 0.
      if self.speedChildMax is None:
        self.speedChildMax = 0.
      if self.distanceMin is None:
        self.distanceMin = 0.
      if self.distanceMax is None:
        self.distanceMax = 0.
      if self.angleMin is None:
        self.angleMin = 0.
      if self.angleMax is None:
        self.angleMax = 0.
      if self.angleTest is None:
        self.angleTest = ''
      if self.angleTestBilateral is None:
        self.angleTestBilateral = False
      if self.timeHold is None:
        self.timeHold = 0.
      if self.timeout is None:
        self.timeout = 0.
    else:
      self.enabled = False
      self.frameidParent = ''
      self.frameidChild = ''
      self.speedParentMin = 0.
      self.speedParentMax = 0.
      self.speedChildMin = 0.
      self.speedChildMax = 0.
      self.distanceMin = 0.
      self.distanceMax = 0.
      self.angleMin = 0.
      self.angleMax = 0.
      self.angleTest = ''
      self.angleTestBilateral = False
      self.timeHold = 0.
      self.timeout = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.enabled))
      _x = self.frameidParent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frameidChild
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.speedParentMin, _x.speedParentMax, _x.speedChildMin, _x.speedChildMax, _x.distanceMin, _x.distanceMax, _x.angleMin, _x.angleMax))
      _x = self.angleTest
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2d.pack(_x.angleTestBilateral, _x.timeHold, _x.timeout))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.enabled,) = _struct_B.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidParent = str[start:end].decode('utf-8')
      else:
        self.frameidParent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidChild = str[start:end].decode('utf-8')
      else:
        self.frameidChild = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.speedParentMin, _x.speedParentMax, _x.speedChildMin, _x.speedChildMax, _x.distanceMin, _x.distanceMax, _x.angleMin, _x.angleMax,) = _struct_8d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.angleTest = str[start:end].decode('utf-8')
      else:
        self.angleTest = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.angleTestBilateral, _x.timeHold, _x.timeout,) = _struct_B2d.unpack(str[start:end])
      self.angleTestBilateral = bool(self.angleTestBilateral)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.enabled))
      _x = self.frameidParent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frameidChild
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.speedParentMin, _x.speedParentMax, _x.speedChildMin, _x.speedChildMax, _x.distanceMin, _x.distanceMax, _x.angleMin, _x.angleMax))
      _x = self.angleTest
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2d.pack(_x.angleTestBilateral, _x.timeHold, _x.timeout))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.enabled,) = _struct_B.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidParent = str[start:end].decode('utf-8')
      else:
        self.frameidParent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frameidChild = str[start:end].decode('utf-8')
      else:
        self.frameidChild = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.speedParentMin, _x.speedParentMax, _x.speedChildMin, _x.speedChildMax, _x.distanceMin, _x.distanceMax, _x.angleMin, _x.angleMax,) = _struct_8d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.angleTest = str[start:end].decode('utf-8')
      else:
        self.angleTest = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.angleTestBilateral, _x.timeHold, _x.timeout,) = _struct_B2d.unpack(str[start:end])
      self.angleTestBilateral = bool(self.angleTestBilateral)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2d = struct.Struct("<B2d")
_struct_B = struct.Struct("<B")
_struct_8d = struct.Struct("<8d")
