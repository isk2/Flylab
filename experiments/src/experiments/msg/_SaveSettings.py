"""autogenerated by genpy from experiments/SaveSettings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SaveSettings(genpy.Message):
  _md5sum = "cf6b14570cfdb33db28349f094aac277"
  _type = "experiments/SaveSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string   filenamebase           # The first part of the filename, before the timestamp, e.g. 'test'.
string   filenamepart           # The filename (without the extension), with the base and timestamp, e.g. 'test20130309031415'.  This field is set by the code.
bool     arenastate
bool     video
bool     onlyWhileTriggered


"""
  __slots__ = ['filenamebase','filenamepart','arenastate','video','onlyWhileTriggered']
  _slot_types = ['string','string','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       filenamebase,filenamepart,arenastate,video,onlyWhileTriggered

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SaveSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filenamebase is None:
        self.filenamebase = ''
      if self.filenamepart is None:
        self.filenamepart = ''
      if self.arenastate is None:
        self.arenastate = False
      if self.video is None:
        self.video = False
      if self.onlyWhileTriggered is None:
        self.onlyWhileTriggered = False
    else:
      self.filenamebase = ''
      self.filenamepart = ''
      self.arenastate = False
      self.video = False
      self.onlyWhileTriggered = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.filenamebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.filenamepart
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B.pack(_x.arenastate, _x.video, _x.onlyWhileTriggered))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filenamebase = str[start:end].decode('utf-8')
      else:
        self.filenamebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filenamepart = str[start:end].decode('utf-8')
      else:
        self.filenamepart = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.arenastate, _x.video, _x.onlyWhileTriggered,) = _struct_3B.unpack(str[start:end])
      self.arenastate = bool(self.arenastate)
      self.video = bool(self.video)
      self.onlyWhileTriggered = bool(self.onlyWhileTriggered)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.filenamebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.filenamepart
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B.pack(_x.arenastate, _x.video, _x.onlyWhileTriggered))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filenamebase = str[start:end].decode('utf-8')
      else:
        self.filenamebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filenamepart = str[start:end].decode('utf-8')
      else:
        self.filenamepart = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.arenastate, _x.video, _x.onlyWhileTriggered,) = _struct_3B.unpack(str[start:end])
      self.arenastate = bool(self.arenastate)
      self.video = bool(self.video)
      self.onlyWhileTriggered = bool(self.onlyWhileTriggered)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
