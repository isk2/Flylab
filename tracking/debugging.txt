-------------------------------------------------------------------------------
Example 1:

xyObjects=[[-45.410189461061549, -42.979161744624314], [-51.098709106445312, -46.929416656494141], [77.418846130371094, -18.104953765869141], [35.941127777099609, -71.131011962890625]]
xyContours=[[-51.108150964776812, -46.899078639811407], [35.790040747365424, -71.443829547320163], [77.275758100811174, -18.868013792468346], [77.388471156033177, -5.0634229828225585]]
ptComputed=[-54.93+9.52, -46.03+3.05]
mapObjects=[3, 0, 2, 1]      ...but we want [0, 3, 2, 1]

d=[[  22.25698651,  174.27299316,  254.94134284,  263.27217221], [   8.45654905,   92.46404673,  136.28149293,  141.37024072], [ 140.13768554,   69.8441791,     5.65219791,   19.27588672], [  98.78385675,    2.53070408,   71.50895765,   84.22668292]]

   Actual Fly near  [77.388471156033177, -5.0634229828225585]       contour 3
   Actual Magnet near [-51.108150964776812, -46.899078639811407]    contour 0
   
Want something like
d=
[[  22.25698651  174.27299316  254.94134284  263.27217221]
 [   8.45654905   92.46404673  136.28149293  141.37024072]
 [ 140.13768554   69.8441791     5.65219791   19.27588672]
 [  98.78385675    2.53070408   71.50895765   84.22668292]]
   
   
-------------------------------------------------------------------------------
Example 2:

xyObjects=
[[39.784679523736202, 10.063193282532476], 
[35.426395416259766, 7.9806318283081055], 
[-11.96486759185791, 78.2978515625], 
[6.1699223518371582, 78.084938049316406], 
[-41.248699188232422, -67.090423583984375], 
[15.242254257202148, -76.824317932128906], 
[4.4096212387084961, -81.033477783203125]]

xyContours=
[[-48.11849812515338, 65.023253532670026], 
[-41.273214444242456, -67.100394927028745], 
[-12.857513061269415, 78.053427431014939], 
[4.7756355216702389, -81.296102556739427], 
[6.2272727113770401, 78.11207729912536], 
[15.258147816250727, -76.815718988543566], 
[35.402968402582673, 7.9084989581369456]]

ptComputed=[48.29-8.51, 4.81+5.25]    #(clipped to mag==10)
ptComputed=[48.29-96.42, 4.81+59.48]  #(not clipped)

mapObjects=[0, 6, 2, 4, 1, 5, 3]     ...but we want [6, 0, 2, 4, 1, 5, 3] 

d=
[[ 105.53326257  121.62995994   91.37167614   99.79821377   78.64136159    95.42506083    8.72263001]
 [ 204.18535481  224.37903329  175.57843579  190.74434808  154.70241791   179.47410034    3.99147629]
 [  78.89000856  306.36203387    7.23505646  322.8999163    39.15428856   320.11914918  173.52624294]
 [ 113.5379889   315.19740918   43.43896992  320.73510617    2.89500619   315.48457512  155.88325473]
 [ 266.44707865    9.76952491  301.17314027   98.29442941  308.30196613   119.82578392  218.31885023]
 [ 312.57365878  124.40840487  320.19645411   24.72456785  313.1649953     5.18664221  178.03628698]
 [ 312.29323062  105.2373198   325.42652745    2.86180109  321.07998037    28.42967778  192.21455531]]

   Actual Magnet near [35.402968402582673, 7.9084989581369456], contour 6
   Actual Fly near  [-48.11849812515338, 65.023253532670026], contour 0
   
   But mapping says Magnet->0, Fly->6
   
   If we pick the 8.7, then we have to pick the 204.1 ==> approx 36+204=240, but we want the 8.7
   If we pick the 3.9, then we have to pick the 105.5 ==> approx 31+105=136 
   
   
import numpy as N
xyObjects=[[39.784679523736202, 10.063193282532476],[35.426395416259766, 7.9806318283081055],[-11.96486759185791, 78.2978515625],[6.1699223518371582, 78.084938049316406],[-41.248699188232422, -67.090423583984375],[15.242254257202148, -76.824317932128906],[4.4096212387084961, -81.033477783203125]]
xyContours=[[-48.11849812515338, 65.023253532670026],[-41.273214444242456, -67.100394927028745],[-12.857513061269415, 78.053427431014939],[4.7756355216702389, -81.296102556739427],[6.2272727113770401, 78.11207729912536],[15.258147816250727, -76.815718988543566],[35.402968402582673, 7.9084989581369456]]
ptComputed=[48.29-8.51, 4.81+5.25]    #(clipped to mag==10)
ptComputed=[48.29-96.42, 4.81+59.48]  #(not clipped)

def GetDistanceMatrix(xyObjects, xyContours, ptComputed):
    d = N.array([[N.inf for n in range(len(xyContours))] for m in range(len(xyObjects))])
    for m in range(len(xyObjects)):
        for n in range(len(xyContours)):
            d[m,n] = N.linalg.norm([xyObjects[m][0]-xyContours[n][0],
                                    xyObjects[m][1]-xyContours[n][1]])
            if m!=0:
                dComputed = N.linalg.norm([ptComputed[0]-xyContours[n][0], ptComputed[1]-xyContours[n][1]])
            else: # Use object position as the computed position.
                dComputed = 0 #d[m,n]
            d[m,n] += dComputed
    return d
    
d=GetDistanceMatrix(xyObjects, xyContours, ptComputed); d.round(); GetMatchGaleShapely(d)
   
[[ 104.,  112.,   86.,   98.,   76.,   90.,    5.],
 [ 202.,  215.,  170.,  189.,  152.,  174.,    0.],
 [  77.,  297.,    2.,  321.,   36.,  315.,  170.],
 [ 112.,  305.,   38.,  319.,    0.,  310.,  152.],
 [ 265.,    0.,  296.,   96.,  306.,  115.,  214.],
 [ 311.,  115.,  315.,   23.,  310.,    0.,  174.],
 [ 310.,   96.,  320.,    1.,  318.,   23.,  188.]])


def GetDistanceMatrix(xyObjects, xyContours, ptComputed):
    d = N.array([[N.inf for n in range(len(xyContours))] for m in range(len(xyObjects))])
    for m in range(len(xyObjects)):
        for n in range(len(xyContours)):
            d[m,n] = N.linalg.norm([xyObjects[m][0]-xyContours[n][0],
                                    xyObjects[m][1]-xyContours[n][1]])
            dComputed = N.linalg.norm([ptComputed[0]-xyObjects[m][0], ptComputed[1]-xyObjects[m][1]])
            d[m,n] += dComputed
    return d
 
 
 
def GetMatchGaleShapely(d):
    len0 = d.shape[0]
    len1 = d.shape[1]
    M = [None for i in range(len0)]
    W = [None for i in range(len1)]
    if None not in d.flatten():
        proposed = [[0 for w in range(len1)] for m in range(len0)] 
        while (None in W) and (None in M):
            if None in M:
                m = M.index(None)
            else:
                m = None
            if m is not None:
                d2 = list(N.array(d[m])+N.array(proposed[m]))
                w = d2.index(min(d2))
                if W[w] is None:
                    M[m] = w
                    W[w] = m
                    proposed[m][w] = 999999
                else:
                    mp = W[w]
                    if d[m][w] < d[mp][w]:
                        M[m] = w
                        W[w] = m
                        proposed[m][w] = 999999
                        M[mp] = None
                    else:
                        M[mp] = w
                        W[w] = mp
                        proposed[mp][w] = 999999
                        proposed[m][w] = 999999
    return M        
    
    
    
 