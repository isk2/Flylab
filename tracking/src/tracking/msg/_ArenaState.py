"""autogenerated by genpy from tracking/ArenaState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flycore.msg
import geometry_msgs.msg
import std_msgs.msg

class ArenaState(genpy.Message):
  _md5sum = "d8cbb1ba4198a22c7838a2e8f6d75dd0"
  _type = "tracking/ArenaState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """flycore/MsgFrameState robot
flycore/MsgFrameState[] flies


================================================================================
MSG: flycore/MsgFrameState
Header              header
string              name
geometry_msgs/Pose  pose
geometry_msgs/Twist velocity
float64             speed # This is here mainly so we can show it with rxplot.
Wings               wings

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: flycore/Wings
WingState   left
WingState   right


================================================================================
MSG: flycore/WingState
float64             angle

"""
  __slots__ = ['robot','flies']
  _slot_types = ['flycore/MsgFrameState','flycore/MsgFrameState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot,flies

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArenaState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot is None:
        self.robot = flycore.msg.MsgFrameState()
      if self.flies is None:
        self.flies = []
    else:
      self.robot = flycore.msg.MsgFrameState()
      self.flies = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.robot.header.seq, _x.robot.header.stamp.secs, _x.robot.header.stamp.nsecs))
      _x = self.robot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_16d.pack(_x.robot.pose.position.x, _x.robot.pose.position.y, _x.robot.pose.position.z, _x.robot.pose.orientation.x, _x.robot.pose.orientation.y, _x.robot.pose.orientation.z, _x.robot.pose.orientation.w, _x.robot.velocity.linear.x, _x.robot.velocity.linear.y, _x.robot.velocity.linear.z, _x.robot.velocity.angular.x, _x.robot.velocity.angular.y, _x.robot.velocity.angular.z, _x.robot.speed, _x.robot.wings.left.angle, _x.robot.wings.right.angle))
      length = len(self.flies)
      buff.write(_struct_I.pack(length))
      for val1 in self.flies:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.velocity
        _v7 = _v6.linear
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.angular
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.speed))
        _v9 = val1.wings
        _v10 = _v9.left
        buff.write(_struct_d.pack(_v10.angle))
        _v11 = _v9.right
        buff.write(_struct_d.pack(_v11.angle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robot is None:
        self.robot = flycore.msg.MsgFrameState()
      if self.flies is None:
        self.flies = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot.header.seq, _x.robot.header.stamp.secs, _x.robot.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.robot.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.name = str[start:end].decode('utf-8')
      else:
        self.robot.name = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.robot.pose.position.x, _x.robot.pose.position.y, _x.robot.pose.position.z, _x.robot.pose.orientation.x, _x.robot.pose.orientation.y, _x.robot.pose.orientation.z, _x.robot.pose.orientation.w, _x.robot.velocity.linear.x, _x.robot.velocity.linear.y, _x.robot.velocity.linear.z, _x.robot.velocity.angular.x, _x.robot.velocity.angular.y, _x.robot.velocity.angular.z, _x.robot.speed, _x.robot.wings.left.angle, _x.robot.wings.right.angle,) = _struct_16d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.flies = []
      for i in range(0, length):
        val1 = flycore.msg.MsgFrameState()
        _v12 = val1.header
        start = end
        end += 4
        (_v12.seq,) = _struct_I.unpack(str[start:end])
        _v13 = _v12.stamp
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.frame_id = str[start:end].decode('utf-8')
        else:
          _v12.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v14 = val1.pose
        _v15 = _v14.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = _v14.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v17 = val1.velocity
        _v18 = _v17.linear
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v19 = _v17.angular
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.speed,) = _struct_d.unpack(str[start:end])
        _v20 = val1.wings
        _v21 = _v20.left
        start = end
        end += 8
        (_v21.angle,) = _struct_d.unpack(str[start:end])
        _v22 = _v20.right
        start = end
        end += 8
        (_v22.angle,) = _struct_d.unpack(str[start:end])
        self.flies.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.robot.header.seq, _x.robot.header.stamp.secs, _x.robot.header.stamp.nsecs))
      _x = self.robot.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_16d.pack(_x.robot.pose.position.x, _x.robot.pose.position.y, _x.robot.pose.position.z, _x.robot.pose.orientation.x, _x.robot.pose.orientation.y, _x.robot.pose.orientation.z, _x.robot.pose.orientation.w, _x.robot.velocity.linear.x, _x.robot.velocity.linear.y, _x.robot.velocity.linear.z, _x.robot.velocity.angular.x, _x.robot.velocity.angular.y, _x.robot.velocity.angular.z, _x.robot.speed, _x.robot.wings.left.angle, _x.robot.wings.right.angle))
      length = len(self.flies)
      buff.write(_struct_I.pack(length))
      for val1 in self.flies:
        _v23 = val1.header
        buff.write(_struct_I.pack(_v23.seq))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v25 = val1.pose
        _v26 = _v25.position
        _x = _v26
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v27 = _v25.orientation
        _x = _v27
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v28 = val1.velocity
        _v29 = _v28.linear
        _x = _v29
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v30 = _v28.angular
        _x = _v30
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.speed))
        _v31 = val1.wings
        _v32 = _v31.left
        buff.write(_struct_d.pack(_v32.angle))
        _v33 = _v31.right
        buff.write(_struct_d.pack(_v33.angle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robot is None:
        self.robot = flycore.msg.MsgFrameState()
      if self.flies is None:
        self.flies = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot.header.seq, _x.robot.header.stamp.secs, _x.robot.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.robot.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.name = str[start:end].decode('utf-8')
      else:
        self.robot.name = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.robot.pose.position.x, _x.robot.pose.position.y, _x.robot.pose.position.z, _x.robot.pose.orientation.x, _x.robot.pose.orientation.y, _x.robot.pose.orientation.z, _x.robot.pose.orientation.w, _x.robot.velocity.linear.x, _x.robot.velocity.linear.y, _x.robot.velocity.linear.z, _x.robot.velocity.angular.x, _x.robot.velocity.angular.y, _x.robot.velocity.angular.z, _x.robot.speed, _x.robot.wings.left.angle, _x.robot.wings.right.angle,) = _struct_16d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.flies = []
      for i in range(0, length):
        val1 = flycore.msg.MsgFrameState()
        _v34 = val1.header
        start = end
        end += 4
        (_v34.seq,) = _struct_I.unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8')
        else:
          _v34.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v36 = val1.pose
        _v37 = _v36.position
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v38 = _v36.orientation
        _x = _v38
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v39 = val1.velocity
        _v40 = _v39.linear
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v41 = _v39.angular
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.speed,) = _struct_d.unpack(str[start:end])
        _v42 = val1.wings
        _v43 = _v42.left
        start = end
        end += 8
        (_v43.angle,) = _struct_d.unpack(str[start:end])
        _v44 = _v42.right
        start = end
        end += 8
        (_v44.angle,) = _struct_d.unpack(str[start:end])
        self.flies.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_16d = struct.Struct("<16d")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
