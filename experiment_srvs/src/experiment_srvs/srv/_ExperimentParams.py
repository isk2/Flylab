"""autogenerated by genpy from experiment_srvs/ExperimentParamsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import flycore.msg
import geometry_msgs.msg
import patterngen.msg
import experiment_msgs.msg

class ExperimentParamsRequest(genpy.Message):
  _md5sum = "ac3366e329653e1404b8bcba5c1d5aba"
  _type = "experiment_srvs/ExperimentParamsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """experiment_msgs/ExperimentSettings  experiment
experiment_msgs/SaveSettings        save
flycore/TrackingCommand             tracking
experiment_msgs/PreSettings         pre
experiment_msgs/TrialSettings       trial
experiment_msgs/PostSettings        post

================================================================================
MSG: experiment_msgs/ExperimentSettings
string  description
int32   maxTrials
int32   trial


================================================================================
MSG: experiment_msgs/SaveSettings
string   filenamebase           # The first part of the filename, before the timestamp, e.g. 'test'.
string   timestamp              # The timestamp in string form, e.g. '20130309031415'.  This field is set by the code.
bool     csv                    # Should we save the Arenastate to .csv?
bool     bag                    # Should we save system input to .bag?  (i.e. camera/image_rect, etc)
bool     mov                    # Should we make an .mov file from the listed image topics?
string[] imagetopic_list        # List of image topics to save to .png files (if saving png).
bool     onlyWhileTriggered     # Save all the trial data, or just from trial-start to trial-end?

================================================================================
MSG: flycore/TrackingCommand
string                command          # 'setexclusionzones' or 'save_background'
flycore/CircleZones   exclusionzones
string                param            # An extra parameter if a command needs it (e.g. save_background specifies a number of contours).


================================================================================
MSG: flycore/CircleZones
bool                        enabled
geometry_msgs/Point[]       point_list
float64[]                   radius_list



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: experiment_msgs/PreSettings
# (waitEntry1->triggerEntry->waitEntry2) runs concurrently with (robot) and (lasergalvos) and (ledpanels).  Any terminate -> all terminate.
float64 			       wait1
TriggerSettings 	       trigger
float64 			       wait2

RobotSettings 		       robot
LasergalvosSettings        lasergalvos
LEDPanelsSettings          ledpanels



================================================================================
MSG: experiment_msgs/TriggerSettings
bool 		enabled
string 		frameidParent 	# 'Plate', 'Robot', 'Fly1', 'Fly2' etc
string 		frameidChild 	
float64 	speedAbsParentMin  # Absolute speed of parent frame.
float64 	speedAbsParentMax
float64 	speedAbsChildMin   # Absolute speed of child frame.
float64 	speedAbsChildMax
float64 	speedRelMin  	# Relative speed between frames.
float64 	speedRelMax
float64 	distanceMin     # Distance from parent to child.
float64 	distanceMax
float64 	angleMin		# Angle to child in parent frame.
float64 	angleMax
string  	angleTest		# 'inclusive' or 'exclusive'
bool    	angleTestBilateral
float64 	timeHold
float64 	timeout



================================================================================
MSG: experiment_msgs/RobotSettings
bool            enabled
MoveSettings    move
HomeSettings    home

================================================================================
MSG: experiment_msgs/MoveSettings
string                    mode  # 'pattern' or 'relative'
MoveRelative              relative
patterngen/MsgPattern     pattern


================================================================================
MSG: experiment_msgs/MoveRelative
bool 		tracking
string 		frameidOriginPosition # 'Plate' or 'Robot' or 'Fly'
string 		frameidOriginAngle # 'Plate' or 'Robot' or 'Fly'
float64 	distance
float64 	angle
string 		angleType # 'random' or 'constant'
float64 	speed
string 		speedType # 'random' or 'constant'
float64 	tolerance


================================================================================
MSG: patterngen/MsgPattern
string                frameidPosition   # The frame to which the pattern position applies.
string                frameidAngle      # The frame to which the pattern angle applies.
string                shape             # 'constant' or 'square' or 'circle' or 'flylogo' or 'spiral' or 'ramp' or 'grid' or 'raster' or 'hilbert' or 'peano' or 'none' or 'bypoints'
float64               hzPattern         # Frequency of the pattern.
float64               hzPoint           # Frequency of points making up the pattern.
int32                 count             # How many times to output the pattern (-1 or N.inf means infinite).
geometry_msgs/Point[] points            # If shape=='bypoints', then this is the list of points to use.
geometry_msgs/Point   size              # (x,y) dimensions.
bool				  preempt           # Should this message restart an in-progress pattern.
float64               param             # An extra shape-dependent parameter, if needed (hilbert->level, peano->level, spiral->pitch, raster->gridpitch).
int32                 direction         # Step forward (+1) or reverse (-1) through the pattern points.
bool				  isDirty			# Set internally to True when the points need regenerating.
 


================================================================================
MSG: experiment_msgs/HomeSettings
bool          enabled
float64       x
float64       y
float64       speed
float64       tolerance



================================================================================
MSG: experiment_msgs/LasergalvosSettings
bool 						enabled
patterngen/MsgPattern[] 	pattern_list
string[]                    statefilterHi_list   		# These lists should either be empty, or contain as many entries as patterns.
string[]                    statefilterLo_list	 		# Contains strings to be interpreted as dicts.  Pattern will only be enabled for fly states between these two entries.
string[]                    statefilterCriteria_list	# "inclusive" or "exclusive"


================================================================================
MSG: experiment_msgs/LEDPanelsSettings
bool                    enabled
string                  command                 # 'None', 'trackposition' (panel position follows fly position), 'trackorientation' (panel position follows fly angle). 
int32                   idPattern               # The pattern number to show.
geometry_msgs/Point     origin
string                  frame_id                # Which frame to track.
string                  statefilterHi   		
string                  statefilterLo	 		# Contains a string to be interpreted as a dict.  Operation will only be enabled for fly states between these two entries.
string                  statefilterCriteria	    # "inclusive" or "exclusive"


================================================================================
MSG: experiment_msgs/TrialSettings
# All run concurrently:  (robot) and (lasergalvos) and (ledpanels).  Any terminate -> all terminate.
RobotSettings 		       robot
LasergalvosSettings        lasergalvos
LEDPanelsSettings          ledpanels



================================================================================
MSG: experiment_msgs/PostSettings
TriggerSettings 	       trigger
float64 			       wait



"""
  __slots__ = ['experiment','save','tracking','pre','trial','post']
  _slot_types = ['experiment_msgs/ExperimentSettings','experiment_msgs/SaveSettings','flycore/TrackingCommand','experiment_msgs/PreSettings','experiment_msgs/TrialSettings','experiment_msgs/PostSettings']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       experiment,save,tracking,pre,trial,post

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExperimentParamsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.experiment is None:
        self.experiment = experiment_msgs.msg.ExperimentSettings()
      if self.save is None:
        self.save = experiment_msgs.msg.SaveSettings()
      if self.tracking is None:
        self.tracking = flycore.msg.TrackingCommand()
      if self.pre is None:
        self.pre = experiment_msgs.msg.PreSettings()
      if self.trial is None:
        self.trial = experiment_msgs.msg.TrialSettings()
      if self.post is None:
        self.post = experiment_msgs.msg.PostSettings()
    else:
      self.experiment = experiment_msgs.msg.ExperimentSettings()
      self.save = experiment_msgs.msg.SaveSettings()
      self.tracking = flycore.msg.TrackingCommand()
      self.pre = experiment_msgs.msg.PreSettings()
      self.trial = experiment_msgs.msg.TrialSettings()
      self.post = experiment_msgs.msg.PostSettings()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.experiment.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.experiment.maxTrials, _x.experiment.trial))
      _x = self.save.filenamebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.save.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B.pack(_x.save.csv, _x.save.bag, _x.save.mov))
      length = len(self.save.imagetopic_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.save.imagetopic_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.save.onlyWhileTriggered))
      _x = self.tracking.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.tracking.exclusionzones.enabled))
      length = len(self.tracking.exclusionzones.point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracking.exclusionzones.point_list:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.tracking.exclusionzones.radius_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.tracking.exclusionzones.radius_list))
      _x = self.tracking.param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_dB.pack(_x.pre.wait1, _x.pre.trigger.enabled))
      _x = self.pre.trigger.frameidParent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.trigger.frameidChild
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d.pack(_x.pre.trigger.speedAbsParentMin, _x.pre.trigger.speedAbsParentMax, _x.pre.trigger.speedAbsChildMin, _x.pre.trigger.speedAbsChildMax, _x.pre.trigger.speedRelMin, _x.pre.trigger.speedRelMax, _x.pre.trigger.distanceMin, _x.pre.trigger.distanceMax, _x.pre.trigger.angleMin, _x.pre.trigger.angleMax))
      _x = self.pre.trigger.angleTest
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dB.pack(_x.pre.trigger.angleTestBilateral, _x.pre.trigger.timeHold, _x.pre.trigger.timeout, _x.pre.wait2, _x.pre.robot.enabled))
      _x = self.pre.robot.move.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.pre.robot.move.relative.tracking))
      _x = self.pre.robot.move.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.robot.move.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.pre.robot.move.relative.distance, _x.pre.robot.move.relative.angle))
      _x = self.pre.robot.move.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.pre.robot.move.relative.speed))
      _x = self.pre.robot.move.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.pre.robot.move.relative.tolerance))
      _x = self.pre.robot.move.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.robot.move.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.robot.move.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.pre.robot.move.pattern.hzPattern, _x.pre.robot.move.pattern.hzPoint, _x.pre.robot.move.pattern.count))
      length = len(self.pre.robot.move.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.robot.move.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdi2B4dB.pack(_x.pre.robot.move.pattern.size.x, _x.pre.robot.move.pattern.size.y, _x.pre.robot.move.pattern.size.z, _x.pre.robot.move.pattern.preempt, _x.pre.robot.move.pattern.param, _x.pre.robot.move.pattern.direction, _x.pre.robot.move.pattern.isDirty, _x.pre.robot.home.enabled, _x.pre.robot.home.x, _x.pre.robot.home.y, _x.pre.robot.home.speed, _x.pre.robot.home.tolerance, _x.pre.lasergalvos.enabled))
      length = len(self.pre.lasergalvos.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.pattern_list:
        _x = val1.frameidPosition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frameidAngle
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v1 = val1.size
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_BdiB.pack(_x.preempt, _x.param, _x.direction, _x.isDirty))
      length = len(self.pre.lasergalvos.statefilterHi_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.statefilterHi_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pre.lasergalvos.statefilterLo_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.statefilterLo_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pre.lasergalvos.statefilterCriteria_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.statefilterCriteria_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.pre.ledpanels.enabled))
      _x = self.pre.ledpanels.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.pre.ledpanels.idPattern, _x.pre.ledpanels.origin.x, _x.pre.ledpanels.origin.y, _x.pre.ledpanels.origin.z))
      _x = self.pre.ledpanels.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.ledpanels.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.ledpanels.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.ledpanels.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.trial.robot.enabled))
      _x = self.trial.robot.move.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.trial.robot.move.relative.tracking))
      _x = self.trial.robot.move.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.robot.move.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.trial.robot.move.relative.distance, _x.trial.robot.move.relative.angle))
      _x = self.trial.robot.move.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.trial.robot.move.relative.speed))
      _x = self.trial.robot.move.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.trial.robot.move.relative.tolerance))
      _x = self.trial.robot.move.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.robot.move.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.robot.move.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.trial.robot.move.pattern.hzPattern, _x.trial.robot.move.pattern.hzPoint, _x.trial.robot.move.pattern.count))
      length = len(self.trial.robot.move.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.robot.move.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdi2B4dB.pack(_x.trial.robot.move.pattern.size.x, _x.trial.robot.move.pattern.size.y, _x.trial.robot.move.pattern.size.z, _x.trial.robot.move.pattern.preempt, _x.trial.robot.move.pattern.param, _x.trial.robot.move.pattern.direction, _x.trial.robot.move.pattern.isDirty, _x.trial.robot.home.enabled, _x.trial.robot.home.x, _x.trial.robot.home.y, _x.trial.robot.home.speed, _x.trial.robot.home.tolerance, _x.trial.lasergalvos.enabled))
      length = len(self.trial.lasergalvos.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.pattern_list:
        _x = val1.frameidPosition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frameidAngle
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.size
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_BdiB.pack(_x.preempt, _x.param, _x.direction, _x.isDirty))
      length = len(self.trial.lasergalvos.statefilterHi_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.statefilterHi_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trial.lasergalvos.statefilterLo_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.statefilterLo_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trial.lasergalvos.statefilterCriteria_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.statefilterCriteria_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.trial.ledpanels.enabled))
      _x = self.trial.ledpanels.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.trial.ledpanels.idPattern, _x.trial.ledpanels.origin.x, _x.trial.ledpanels.origin.y, _x.trial.ledpanels.origin.z))
      _x = self.trial.ledpanels.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.ledpanels.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.ledpanels.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.ledpanels.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.post.trigger.enabled))
      _x = self.post.trigger.frameidParent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.post.trigger.frameidChild
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d.pack(_x.post.trigger.speedAbsParentMin, _x.post.trigger.speedAbsParentMax, _x.post.trigger.speedAbsChildMin, _x.post.trigger.speedAbsChildMax, _x.post.trigger.speedRelMin, _x.post.trigger.speedRelMax, _x.post.trigger.distanceMin, _x.post.trigger.distanceMax, _x.post.trigger.angleMin, _x.post.trigger.angleMax))
      _x = self.post.trigger.angleTest
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3d.pack(_x.post.trigger.angleTestBilateral, _x.post.trigger.timeHold, _x.post.trigger.timeout, _x.post.wait))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.experiment is None:
        self.experiment = experiment_msgs.msg.ExperimentSettings()
      if self.save is None:
        self.save = experiment_msgs.msg.SaveSettings()
      if self.tracking is None:
        self.tracking = flycore.msg.TrackingCommand()
      if self.pre is None:
        self.pre = experiment_msgs.msg.PreSettings()
      if self.trial is None:
        self.trial = experiment_msgs.msg.TrialSettings()
      if self.post is None:
        self.post = experiment_msgs.msg.PostSettings()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.experiment.description = str[start:end].decode('utf-8')
      else:
        self.experiment.description = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.experiment.maxTrials, _x.experiment.trial,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.save.filenamebase = str[start:end].decode('utf-8')
      else:
        self.save.filenamebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.save.timestamp = str[start:end].decode('utf-8')
      else:
        self.save.timestamp = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.save.csv, _x.save.bag, _x.save.mov,) = _struct_3B.unpack(str[start:end])
      self.save.csv = bool(self.save.csv)
      self.save.bag = bool(self.save.bag)
      self.save.mov = bool(self.save.mov)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.save.imagetopic_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.save.imagetopic_list.append(val1)
      start = end
      end += 1
      (self.save.onlyWhileTriggered,) = _struct_B.unpack(str[start:end])
      self.save.onlyWhileTriggered = bool(self.save.onlyWhileTriggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking.command = str[start:end].decode('utf-8')
      else:
        self.tracking.command = str[start:end]
      start = end
      end += 1
      (self.tracking.exclusionzones.enabled,) = _struct_B.unpack(str[start:end])
      self.tracking.exclusionzones.enabled = bool(self.tracking.exclusionzones.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracking.exclusionzones.point_list = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.tracking.exclusionzones.point_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tracking.exclusionzones.radius_list = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking.param = str[start:end].decode('utf-8')
      else:
        self.tracking.param = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.pre.wait1, _x.pre.trigger.enabled,) = _struct_dB.unpack(str[start:end])
      self.pre.trigger.enabled = bool(self.pre.trigger.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.trigger.frameidParent = str[start:end].decode('utf-8')
      else:
        self.pre.trigger.frameidParent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.trigger.frameidChild = str[start:end].decode('utf-8')
      else:
        self.pre.trigger.frameidChild = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.pre.trigger.speedAbsParentMin, _x.pre.trigger.speedAbsParentMax, _x.pre.trigger.speedAbsChildMin, _x.pre.trigger.speedAbsChildMax, _x.pre.trigger.speedRelMin, _x.pre.trigger.speedRelMax, _x.pre.trigger.distanceMin, _x.pre.trigger.distanceMax, _x.pre.trigger.angleMin, _x.pre.trigger.angleMax,) = _struct_10d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.trigger.angleTest = str[start:end].decode('utf-8')
      else:
        self.pre.trigger.angleTest = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.pre.trigger.angleTestBilateral, _x.pre.trigger.timeHold, _x.pre.trigger.timeout, _x.pre.wait2, _x.pre.robot.enabled,) = _struct_B3dB.unpack(str[start:end])
      self.pre.trigger.angleTestBilateral = bool(self.pre.trigger.angleTestBilateral)
      self.pre.robot.enabled = bool(self.pre.robot.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.mode = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.mode = str[start:end]
      start = end
      end += 1
      (self.pre.robot.move.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.pre.robot.move.relative.tracking = bool(self.pre.robot.move.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.pre.robot.move.relative.distance, _x.pre.robot.move.relative.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.angleType = str[start:end]
      start = end
      end += 8
      (self.pre.robot.move.relative.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.speedType = str[start:end]
      start = end
      end += 8
      (self.pre.robot.move.relative.tolerance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.pre.robot.move.pattern.hzPattern, _x.pre.robot.move.pattern.hzPoint, _x.pre.robot.move.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.robot.move.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.pre.robot.move.pattern.points.append(val1)
      _x = self
      start = end
      end += 72
      (_x.pre.robot.move.pattern.size.x, _x.pre.robot.move.pattern.size.y, _x.pre.robot.move.pattern.size.z, _x.pre.robot.move.pattern.preempt, _x.pre.robot.move.pattern.param, _x.pre.robot.move.pattern.direction, _x.pre.robot.move.pattern.isDirty, _x.pre.robot.home.enabled, _x.pre.robot.home.x, _x.pre.robot.home.y, _x.pre.robot.home.speed, _x.pre.robot.home.tolerance, _x.pre.lasergalvos.enabled,) = _struct_3dBdi2B4dB.unpack(str[start:end])
      self.pre.robot.move.pattern.preempt = bool(self.pre.robot.move.pattern.preempt)
      self.pre.robot.move.pattern.isDirty = bool(self.pre.robot.move.pattern.isDirty)
      self.pre.robot.home.enabled = bool(self.pre.robot.home.enabled)
      self.pre.lasergalvos.enabled = bool(self.pre.lasergalvos.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidPosition = str[start:end].decode('utf-8')
        else:
          val1.frameidPosition = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidAngle = str[start:end].decode('utf-8')
        else:
          val1.frameidAngle = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _v3 = val1.size
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.preempt, _x.param, _x.direction, _x.isDirty,) = _struct_BdiB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        val1.isDirty = bool(val1.isDirty)
        self.pre.lasergalvos.pattern_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.statefilterHi_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pre.lasergalvos.statefilterHi_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.statefilterLo_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pre.lasergalvos.statefilterLo_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.statefilterCriteria_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pre.lasergalvos.statefilterCriteria_list.append(val1)
      start = end
      end += 1
      (self.pre.ledpanels.enabled,) = _struct_B.unpack(str[start:end])
      self.pre.ledpanels.enabled = bool(self.pre.ledpanels.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.command = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.pre.ledpanels.idPattern, _x.pre.ledpanels.origin.x, _x.pre.ledpanels.origin.y, _x.pre.ledpanels.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.frame_id = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.statefilterCriteria = str[start:end]
      start = end
      end += 1
      (self.trial.robot.enabled,) = _struct_B.unpack(str[start:end])
      self.trial.robot.enabled = bool(self.trial.robot.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.mode = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.mode = str[start:end]
      start = end
      end += 1
      (self.trial.robot.move.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.trial.robot.move.relative.tracking = bool(self.trial.robot.move.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.trial.robot.move.relative.distance, _x.trial.robot.move.relative.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.angleType = str[start:end]
      start = end
      end += 8
      (self.trial.robot.move.relative.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.speedType = str[start:end]
      start = end
      end += 8
      (self.trial.robot.move.relative.tolerance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.trial.robot.move.pattern.hzPattern, _x.trial.robot.move.pattern.hzPoint, _x.trial.robot.move.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.robot.move.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.trial.robot.move.pattern.points.append(val1)
      _x = self
      start = end
      end += 72
      (_x.trial.robot.move.pattern.size.x, _x.trial.robot.move.pattern.size.y, _x.trial.robot.move.pattern.size.z, _x.trial.robot.move.pattern.preempt, _x.trial.robot.move.pattern.param, _x.trial.robot.move.pattern.direction, _x.trial.robot.move.pattern.isDirty, _x.trial.robot.home.enabled, _x.trial.robot.home.x, _x.trial.robot.home.y, _x.trial.robot.home.speed, _x.trial.robot.home.tolerance, _x.trial.lasergalvos.enabled,) = _struct_3dBdi2B4dB.unpack(str[start:end])
      self.trial.robot.move.pattern.preempt = bool(self.trial.robot.move.pattern.preempt)
      self.trial.robot.move.pattern.isDirty = bool(self.trial.robot.move.pattern.isDirty)
      self.trial.robot.home.enabled = bool(self.trial.robot.home.enabled)
      self.trial.lasergalvos.enabled = bool(self.trial.lasergalvos.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidPosition = str[start:end].decode('utf-8')
        else:
          val1.frameidPosition = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidAngle = str[start:end].decode('utf-8')
        else:
          val1.frameidAngle = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _v4 = val1.size
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.preempt, _x.param, _x.direction, _x.isDirty,) = _struct_BdiB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        val1.isDirty = bool(val1.isDirty)
        self.trial.lasergalvos.pattern_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.statefilterHi_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trial.lasergalvos.statefilterHi_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.statefilterLo_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trial.lasergalvos.statefilterLo_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.statefilterCriteria_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trial.lasergalvos.statefilterCriteria_list.append(val1)
      start = end
      end += 1
      (self.trial.ledpanels.enabled,) = _struct_B.unpack(str[start:end])
      self.trial.ledpanels.enabled = bool(self.trial.ledpanels.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.command = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.trial.ledpanels.idPattern, _x.trial.ledpanels.origin.x, _x.trial.ledpanels.origin.y, _x.trial.ledpanels.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.frame_id = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.statefilterCriteria = str[start:end]
      start = end
      end += 1
      (self.post.trigger.enabled,) = _struct_B.unpack(str[start:end])
      self.post.trigger.enabled = bool(self.post.trigger.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.post.trigger.frameidParent = str[start:end].decode('utf-8')
      else:
        self.post.trigger.frameidParent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.post.trigger.frameidChild = str[start:end].decode('utf-8')
      else:
        self.post.trigger.frameidChild = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.post.trigger.speedAbsParentMin, _x.post.trigger.speedAbsParentMax, _x.post.trigger.speedAbsChildMin, _x.post.trigger.speedAbsChildMax, _x.post.trigger.speedRelMin, _x.post.trigger.speedRelMax, _x.post.trigger.distanceMin, _x.post.trigger.distanceMax, _x.post.trigger.angleMin, _x.post.trigger.angleMax,) = _struct_10d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.post.trigger.angleTest = str[start:end].decode('utf-8')
      else:
        self.post.trigger.angleTest = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.post.trigger.angleTestBilateral, _x.post.trigger.timeHold, _x.post.trigger.timeout, _x.post.wait,) = _struct_B3d.unpack(str[start:end])
      self.post.trigger.angleTestBilateral = bool(self.post.trigger.angleTestBilateral)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.experiment.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.experiment.maxTrials, _x.experiment.trial))
      _x = self.save.filenamebase
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.save.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B.pack(_x.save.csv, _x.save.bag, _x.save.mov))
      length = len(self.save.imagetopic_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.save.imagetopic_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.save.onlyWhileTriggered))
      _x = self.tracking.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.tracking.exclusionzones.enabled))
      length = len(self.tracking.exclusionzones.point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracking.exclusionzones.point_list:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.tracking.exclusionzones.radius_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tracking.exclusionzones.radius_list.tostring())
      _x = self.tracking.param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_dB.pack(_x.pre.wait1, _x.pre.trigger.enabled))
      _x = self.pre.trigger.frameidParent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.trigger.frameidChild
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d.pack(_x.pre.trigger.speedAbsParentMin, _x.pre.trigger.speedAbsParentMax, _x.pre.trigger.speedAbsChildMin, _x.pre.trigger.speedAbsChildMax, _x.pre.trigger.speedRelMin, _x.pre.trigger.speedRelMax, _x.pre.trigger.distanceMin, _x.pre.trigger.distanceMax, _x.pre.trigger.angleMin, _x.pre.trigger.angleMax))
      _x = self.pre.trigger.angleTest
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dB.pack(_x.pre.trigger.angleTestBilateral, _x.pre.trigger.timeHold, _x.pre.trigger.timeout, _x.pre.wait2, _x.pre.robot.enabled))
      _x = self.pre.robot.move.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.pre.robot.move.relative.tracking))
      _x = self.pre.robot.move.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.robot.move.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.pre.robot.move.relative.distance, _x.pre.robot.move.relative.angle))
      _x = self.pre.robot.move.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.pre.robot.move.relative.speed))
      _x = self.pre.robot.move.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.pre.robot.move.relative.tolerance))
      _x = self.pre.robot.move.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.robot.move.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.robot.move.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.pre.robot.move.pattern.hzPattern, _x.pre.robot.move.pattern.hzPoint, _x.pre.robot.move.pattern.count))
      length = len(self.pre.robot.move.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.robot.move.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdi2B4dB.pack(_x.pre.robot.move.pattern.size.x, _x.pre.robot.move.pattern.size.y, _x.pre.robot.move.pattern.size.z, _x.pre.robot.move.pattern.preempt, _x.pre.robot.move.pattern.param, _x.pre.robot.move.pattern.direction, _x.pre.robot.move.pattern.isDirty, _x.pre.robot.home.enabled, _x.pre.robot.home.x, _x.pre.robot.home.y, _x.pre.robot.home.speed, _x.pre.robot.home.tolerance, _x.pre.lasergalvos.enabled))
      length = len(self.pre.lasergalvos.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.pattern_list:
        _x = val1.frameidPosition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frameidAngle
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.size
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_BdiB.pack(_x.preempt, _x.param, _x.direction, _x.isDirty))
      length = len(self.pre.lasergalvos.statefilterHi_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.statefilterHi_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pre.lasergalvos.statefilterLo_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.statefilterLo_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.pre.lasergalvos.statefilterCriteria_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pre.lasergalvos.statefilterCriteria_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.pre.ledpanels.enabled))
      _x = self.pre.ledpanels.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.pre.ledpanels.idPattern, _x.pre.ledpanels.origin.x, _x.pre.ledpanels.origin.y, _x.pre.ledpanels.origin.z))
      _x = self.pre.ledpanels.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.ledpanels.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.ledpanels.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre.ledpanels.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.trial.robot.enabled))
      _x = self.trial.robot.move.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.trial.robot.move.relative.tracking))
      _x = self.trial.robot.move.relative.frameidOriginPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.robot.move.relative.frameidOriginAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.trial.robot.move.relative.distance, _x.trial.robot.move.relative.angle))
      _x = self.trial.robot.move.relative.angleType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.trial.robot.move.relative.speed))
      _x = self.trial.robot.move.relative.speedType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.trial.robot.move.relative.tolerance))
      _x = self.trial.robot.move.pattern.frameidPosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.robot.move.pattern.frameidAngle
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.robot.move.pattern.shape
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2di.pack(_x.trial.robot.move.pattern.hzPattern, _x.trial.robot.move.pattern.hzPoint, _x.trial.robot.move.pattern.count))
      length = len(self.trial.robot.move.pattern.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.robot.move.pattern.points:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3dBdi2B4dB.pack(_x.trial.robot.move.pattern.size.x, _x.trial.robot.move.pattern.size.y, _x.trial.robot.move.pattern.size.z, _x.trial.robot.move.pattern.preempt, _x.trial.robot.move.pattern.param, _x.trial.robot.move.pattern.direction, _x.trial.robot.move.pattern.isDirty, _x.trial.robot.home.enabled, _x.trial.robot.home.x, _x.trial.robot.home.y, _x.trial.robot.home.speed, _x.trial.robot.home.tolerance, _x.trial.lasergalvos.enabled))
      length = len(self.trial.lasergalvos.pattern_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.pattern_list:
        _x = val1.frameidPosition
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.frameidAngle
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.shape
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2di.pack(_x.hzPattern, _x.hzPoint, _x.count))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.size
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_BdiB.pack(_x.preempt, _x.param, _x.direction, _x.isDirty))
      length = len(self.trial.lasergalvos.statefilterHi_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.statefilterHi_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trial.lasergalvos.statefilterLo_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.statefilterLo_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trial.lasergalvos.statefilterCriteria_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.trial.lasergalvos.statefilterCriteria_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_B.pack(self.trial.ledpanels.enabled))
      _x = self.trial.ledpanels.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3d.pack(_x.trial.ledpanels.idPattern, _x.trial.ledpanels.origin.x, _x.trial.ledpanels.origin.y, _x.trial.ledpanels.origin.z))
      _x = self.trial.ledpanels.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.ledpanels.statefilterHi
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.ledpanels.statefilterLo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.trial.ledpanels.statefilterCriteria
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.post.trigger.enabled))
      _x = self.post.trigger.frameidParent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.post.trigger.frameidChild
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d.pack(_x.post.trigger.speedAbsParentMin, _x.post.trigger.speedAbsParentMax, _x.post.trigger.speedAbsChildMin, _x.post.trigger.speedAbsChildMax, _x.post.trigger.speedRelMin, _x.post.trigger.speedRelMax, _x.post.trigger.distanceMin, _x.post.trigger.distanceMax, _x.post.trigger.angleMin, _x.post.trigger.angleMax))
      _x = self.post.trigger.angleTest
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3d.pack(_x.post.trigger.angleTestBilateral, _x.post.trigger.timeHold, _x.post.trigger.timeout, _x.post.wait))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.experiment is None:
        self.experiment = experiment_msgs.msg.ExperimentSettings()
      if self.save is None:
        self.save = experiment_msgs.msg.SaveSettings()
      if self.tracking is None:
        self.tracking = flycore.msg.TrackingCommand()
      if self.pre is None:
        self.pre = experiment_msgs.msg.PreSettings()
      if self.trial is None:
        self.trial = experiment_msgs.msg.TrialSettings()
      if self.post is None:
        self.post = experiment_msgs.msg.PostSettings()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.experiment.description = str[start:end].decode('utf-8')
      else:
        self.experiment.description = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.experiment.maxTrials, _x.experiment.trial,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.save.filenamebase = str[start:end].decode('utf-8')
      else:
        self.save.filenamebase = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.save.timestamp = str[start:end].decode('utf-8')
      else:
        self.save.timestamp = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.save.csv, _x.save.bag, _x.save.mov,) = _struct_3B.unpack(str[start:end])
      self.save.csv = bool(self.save.csv)
      self.save.bag = bool(self.save.bag)
      self.save.mov = bool(self.save.mov)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.save.imagetopic_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.save.imagetopic_list.append(val1)
      start = end
      end += 1
      (self.save.onlyWhileTriggered,) = _struct_B.unpack(str[start:end])
      self.save.onlyWhileTriggered = bool(self.save.onlyWhileTriggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking.command = str[start:end].decode('utf-8')
      else:
        self.tracking.command = str[start:end]
      start = end
      end += 1
      (self.tracking.exclusionzones.enabled,) = _struct_B.unpack(str[start:end])
      self.tracking.exclusionzones.enabled = bool(self.tracking.exclusionzones.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracking.exclusionzones.point_list = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.tracking.exclusionzones.point_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tracking.exclusionzones.radius_list = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking.param = str[start:end].decode('utf-8')
      else:
        self.tracking.param = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.pre.wait1, _x.pre.trigger.enabled,) = _struct_dB.unpack(str[start:end])
      self.pre.trigger.enabled = bool(self.pre.trigger.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.trigger.frameidParent = str[start:end].decode('utf-8')
      else:
        self.pre.trigger.frameidParent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.trigger.frameidChild = str[start:end].decode('utf-8')
      else:
        self.pre.trigger.frameidChild = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.pre.trigger.speedAbsParentMin, _x.pre.trigger.speedAbsParentMax, _x.pre.trigger.speedAbsChildMin, _x.pre.trigger.speedAbsChildMax, _x.pre.trigger.speedRelMin, _x.pre.trigger.speedRelMax, _x.pre.trigger.distanceMin, _x.pre.trigger.distanceMax, _x.pre.trigger.angleMin, _x.pre.trigger.angleMax,) = _struct_10d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.trigger.angleTest = str[start:end].decode('utf-8')
      else:
        self.pre.trigger.angleTest = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.pre.trigger.angleTestBilateral, _x.pre.trigger.timeHold, _x.pre.trigger.timeout, _x.pre.wait2, _x.pre.robot.enabled,) = _struct_B3dB.unpack(str[start:end])
      self.pre.trigger.angleTestBilateral = bool(self.pre.trigger.angleTestBilateral)
      self.pre.robot.enabled = bool(self.pre.robot.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.mode = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.mode = str[start:end]
      start = end
      end += 1
      (self.pre.robot.move.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.pre.robot.move.relative.tracking = bool(self.pre.robot.move.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.pre.robot.move.relative.distance, _x.pre.robot.move.relative.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.angleType = str[start:end]
      start = end
      end += 8
      (self.pre.robot.move.relative.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.relative.speedType = str[start:end]
      start = end
      end += 8
      (self.pre.robot.move.relative.tolerance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.robot.move.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.pre.robot.move.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.pre.robot.move.pattern.hzPattern, _x.pre.robot.move.pattern.hzPoint, _x.pre.robot.move.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.robot.move.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.pre.robot.move.pattern.points.append(val1)
      _x = self
      start = end
      end += 72
      (_x.pre.robot.move.pattern.size.x, _x.pre.robot.move.pattern.size.y, _x.pre.robot.move.pattern.size.z, _x.pre.robot.move.pattern.preempt, _x.pre.robot.move.pattern.param, _x.pre.robot.move.pattern.direction, _x.pre.robot.move.pattern.isDirty, _x.pre.robot.home.enabled, _x.pre.robot.home.x, _x.pre.robot.home.y, _x.pre.robot.home.speed, _x.pre.robot.home.tolerance, _x.pre.lasergalvos.enabled,) = _struct_3dBdi2B4dB.unpack(str[start:end])
      self.pre.robot.move.pattern.preempt = bool(self.pre.robot.move.pattern.preempt)
      self.pre.robot.move.pattern.isDirty = bool(self.pre.robot.move.pattern.isDirty)
      self.pre.robot.home.enabled = bool(self.pre.robot.home.enabled)
      self.pre.lasergalvos.enabled = bool(self.pre.lasergalvos.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidPosition = str[start:end].decode('utf-8')
        else:
          val1.frameidPosition = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidAngle = str[start:end].decode('utf-8')
        else:
          val1.frameidAngle = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _v7 = val1.size
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.preempt, _x.param, _x.direction, _x.isDirty,) = _struct_BdiB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        val1.isDirty = bool(val1.isDirty)
        self.pre.lasergalvos.pattern_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.statefilterHi_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pre.lasergalvos.statefilterHi_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.statefilterLo_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pre.lasergalvos.statefilterLo_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pre.lasergalvos.statefilterCriteria_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pre.lasergalvos.statefilterCriteria_list.append(val1)
      start = end
      end += 1
      (self.pre.ledpanels.enabled,) = _struct_B.unpack(str[start:end])
      self.pre.ledpanels.enabled = bool(self.pre.ledpanels.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.command = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.pre.ledpanels.idPattern, _x.pre.ledpanels.origin.x, _x.pre.ledpanels.origin.y, _x.pre.ledpanels.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.frame_id = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre.ledpanels.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.pre.ledpanels.statefilterCriteria = str[start:end]
      start = end
      end += 1
      (self.trial.robot.enabled,) = _struct_B.unpack(str[start:end])
      self.trial.robot.enabled = bool(self.trial.robot.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.mode = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.mode = str[start:end]
      start = end
      end += 1
      (self.trial.robot.move.relative.tracking,) = _struct_B.unpack(str[start:end])
      self.trial.robot.move.relative.tracking = bool(self.trial.robot.move.relative.tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.frameidOriginPosition = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.frameidOriginPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.frameidOriginAngle = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.frameidOriginAngle = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.trial.robot.move.relative.distance, _x.trial.robot.move.relative.angle,) = _struct_2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.angleType = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.angleType = str[start:end]
      start = end
      end += 8
      (self.trial.robot.move.relative.speed,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.relative.speedType = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.relative.speedType = str[start:end]
      start = end
      end += 8
      (self.trial.robot.move.relative.tolerance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.pattern.frameidPosition = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.pattern.frameidPosition = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.pattern.frameidAngle = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.pattern.frameidAngle = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.robot.move.pattern.shape = str[start:end].decode('utf-8')
      else:
        self.trial.robot.move.pattern.shape = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.trial.robot.move.pattern.hzPattern, _x.trial.robot.move.pattern.hzPoint, _x.trial.robot.move.pattern.count,) = _struct_2di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.robot.move.pattern.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.trial.robot.move.pattern.points.append(val1)
      _x = self
      start = end
      end += 72
      (_x.trial.robot.move.pattern.size.x, _x.trial.robot.move.pattern.size.y, _x.trial.robot.move.pattern.size.z, _x.trial.robot.move.pattern.preempt, _x.trial.robot.move.pattern.param, _x.trial.robot.move.pattern.direction, _x.trial.robot.move.pattern.isDirty, _x.trial.robot.home.enabled, _x.trial.robot.home.x, _x.trial.robot.home.y, _x.trial.robot.home.speed, _x.trial.robot.home.tolerance, _x.trial.lasergalvos.enabled,) = _struct_3dBdi2B4dB.unpack(str[start:end])
      self.trial.robot.move.pattern.preempt = bool(self.trial.robot.move.pattern.preempt)
      self.trial.robot.move.pattern.isDirty = bool(self.trial.robot.move.pattern.isDirty)
      self.trial.robot.home.enabled = bool(self.trial.robot.home.enabled)
      self.trial.lasergalvos.enabled = bool(self.trial.lasergalvos.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.pattern_list = []
      for i in range(0, length):
        val1 = patterngen.msg.MsgPattern()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidPosition = str[start:end].decode('utf-8')
        else:
          val1.frameidPosition = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frameidAngle = str[start:end].decode('utf-8')
        else:
          val1.frameidAngle = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.shape = str[start:end].decode('utf-8')
        else:
          val1.shape = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.hzPattern, _x.hzPoint, _x.count,) = _struct_2di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        _v8 = val1.size
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.preempt, _x.param, _x.direction, _x.isDirty,) = _struct_BdiB.unpack(str[start:end])
        val1.preempt = bool(val1.preempt)
        val1.isDirty = bool(val1.isDirty)
        self.trial.lasergalvos.pattern_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.statefilterHi_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trial.lasergalvos.statefilterHi_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.statefilterLo_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trial.lasergalvos.statefilterLo_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trial.lasergalvos.statefilterCriteria_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trial.lasergalvos.statefilterCriteria_list.append(val1)
      start = end
      end += 1
      (self.trial.ledpanels.enabled,) = _struct_B.unpack(str[start:end])
      self.trial.ledpanels.enabled = bool(self.trial.ledpanels.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.command = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.trial.ledpanels.idPattern, _x.trial.ledpanels.origin.x, _x.trial.ledpanels.origin.y, _x.trial.ledpanels.origin.z,) = _struct_i3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.frame_id = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.statefilterHi = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.statefilterHi = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.statefilterLo = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.statefilterLo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trial.ledpanels.statefilterCriteria = str[start:end].decode('utf-8')
      else:
        self.trial.ledpanels.statefilterCriteria = str[start:end]
      start = end
      end += 1
      (self.post.trigger.enabled,) = _struct_B.unpack(str[start:end])
      self.post.trigger.enabled = bool(self.post.trigger.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.post.trigger.frameidParent = str[start:end].decode('utf-8')
      else:
        self.post.trigger.frameidParent = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.post.trigger.frameidChild = str[start:end].decode('utf-8')
      else:
        self.post.trigger.frameidChild = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.post.trigger.speedAbsParentMin, _x.post.trigger.speedAbsParentMax, _x.post.trigger.speedAbsChildMin, _x.post.trigger.speedAbsChildMax, _x.post.trigger.speedRelMin, _x.post.trigger.speedRelMax, _x.post.trigger.distanceMin, _x.post.trigger.distanceMax, _x.post.trigger.angleMin, _x.post.trigger.angleMax,) = _struct_10d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.post.trigger.angleTest = str[start:end].decode('utf-8')
      else:
        self.post.trigger.angleTest = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.post.trigger.angleTestBilateral, _x.post.trigger.timeHold, _x.post.trigger.timeout, _x.post.wait,) = _struct_B3d.unpack(str[start:end])
      self.post.trigger.angleTestBilateral = bool(self.post.trigger.angleTestBilateral)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_BdiB = struct.Struct("<BdiB")
_struct_dB = struct.Struct("<dB")
_struct_10d = struct.Struct("<10d")
_struct_2d = struct.Struct("<2d")
_struct_3dBdi2B4dB = struct.Struct("<3dBdi2B4dB")
_struct_B3dB = struct.Struct("<B3dB")
_struct_B3d = struct.Struct("<B3d")
_struct_3B = struct.Struct("<3B")
_struct_i3d = struct.Struct("<i3d")
_struct_2di = struct.Struct("<2di")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from experiment_srvs/ExperimentParamsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExperimentParamsResponse(genpy.Message):
  _md5sum = "95e696a0d10686913abb262e0b4cbbcf"
  _type = "experiment_srvs/ExperimentParamsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool 				                succeeded



"""
  __slots__ = ['succeeded']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       succeeded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExperimentParamsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.succeeded is None:
        self.succeeded = False
    else:
      self.succeeded = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.succeeded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeeded,) = _struct_B.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.succeeded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeeded,) = _struct_B.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class ExperimentParams(object):
  _type          = 'experiment_srvs/ExperimentParams'
  _md5sum = '16be195079183c63e94a0f20ec68e573'
  _request_class  = ExperimentParamsRequest
  _response_class = ExperimentParamsResponse
