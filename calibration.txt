###############################################################################################################
###############################################################################################################
##  Calibration Overview:  
##  The steps below result in several files specific to your camera, camera position, actuator hardware, etc:
##  	<your device name>.launch                          The main launch file to make your device available in ROS.
##  	params_camera.yaml                                 Contains exposure, resolution, & other settings for your camera.
##  	camera.launch                                      The launch file for the camera mounted to your experimental device.
##  	calibration.yaml                                   Parameters describing the relative positions of things.
##  	/cameras/<your device name>_calibration.yaml       Contains distortion & other camera parameters.
##  	/cameras/background.png                            Background image of an empty arena.
###############################################################################################################
###############################################################################################################


0)  ############################### Preliminary System Stuff:
# Create calibration directory.
sudo mkdir /cameras
sudo chgrp video cameras/
sudo chmod g+rwx cameras/
groups   # (If "video" isn't listed, then "sudo usermod -a -G video username").

rosmake experiments

# If using simple_step
cd ~/git/Flylab/udevrules
sudo cp 99-simple_step.rules /etc/udev/rules.d
sudo usermod -a -G plugdev <username>


0)  ############################### If this is new hardware:
cd ...Flylab/ros/config
roscreate-pkg <your device name>
cp -r colosseum/launch <your device name>/launch
# Edit the files in the launch directory as appropriate.
git add .
git commit -m "Adding new hardware config."
# Add a dependency to the manifest.xml file in "experiments"



1 ############################### Point to your hardware:
# Determine the name of your experimental hardware, i.e. <your device name>
roscd config/launch
gedit hardware.launch
# Edit hardware.launch to point to your .launch file, e.g. racetrack.launch



2 ############################### Adjust Camera Exposure:
# Start the camera node.
roslaunch <your device name> camera.launch &


# Start the camera viewer.  (Might need to "rosmake image_view" first).
rosrun image_view image_view image:=camera/image_raw &   


# Open the camera properties window.
rosrun dynamic_reconfigure reconfigure_gui camera &


# Adjust mode, brightness, exposure, gain, shutter, etc.
# Edit "params_camera.yaml" with the new settings, for example:
#     ~/git/Flylab/ros/racetrack/launch/params_camera.yaml
# Close the Dynamic Reconfigure window.


# Kill the camera node.
kill `ps a -o pid,args --no-headers | grep camera1394 | grep CAMERANAME | cut -d ' ' -f 1`


3 ############################### Camera Intrinsic Parameters (i.e. Lens distortion):
# Launch the camera node with adjusted settings.
roslaunch <your device name> camera.launch &

# Calibrate for distortion.
# Print out ~/git/Flylab/ros/calibration/patterns/camera_calibration_pattern_30mm.pdf in 1:1 scale
# Measure each checker to make sure it is 30mm, then tape pattern to something flat
# Unmount camera from rig if necessary to give calibration pattern plenty of room to move
rosrun camera_calibration cameracalibrator.py --size 8x6 --square 0.030 image:=/camera/image_raw camera:=/camera

# Wave 30mm checkerboard pattern in front of camera until calibrate button activates
# Click <calibrate> button (will take several minutes)
# Click <commit> button (writes data to /cameras/<your device name>_calibration.yaml)
roscd <your device name>/launch
# Edit "params_camera.launch" to refer to the "/cameras/<camera name>_calibration.yaml" file.


4 ############################### Camera Extrinsic Parameters (i.e. Relationship of Camera to Arena):
# Mount camera on flylab rig, positioned so that the arena is roughly centered in image.
roscd config/launch
gedit hardware.launch
# Make sure it points to <your device name>.launch, save & exit.
roslaunch calibration CameraPlate.launch

# Use the following command to move the center and radius of the circle to correspond to the arena.
rostopic pub -1 Joystick/Commands geometry_msgs/Point -- dx dy dr            #(where dx,dy,dr are replaced with numbers)

roscd <your device name>/launch
# Edit params_calibration.launch with mask/x, mask/y, mask/radius, etc. 
# Print ~/git/Flylab/ros/calibration/patterns/camera_plate_calibration_pattern.pdf in 1:1 scale
# Measure the checker square size, and enter that number (in millimeters) in params_calibration.  
# Place circular paper containing the checkerboard pattern on plate
# Edit calibration.launch with rvec and tvec values.
# Ctrl+c to shutdown CameraPlate.launch


5 ############################### Acquire a New Background Image:
# Remove all objects from plate, then:
rm /cameras/background.png
roslaunch experiments <any experiment>.launch
# After the background.png file is written, place the magnet in the arena.

# Adjust the diff_threshold so that contours look good.
rosparam set tracking/diff_threshold <value>
# Once you have figured out the correct value, save it in the file "params_tracking.yaml" 
#Ctrl+c to kill the experiment.


6 ############################### Stage Extrinsic Parameters (i.e. Relationship of Stage to Arena):
roscd config/launch
gedit hardware.launch
# Make sure it points to <your device name>.launch, save & exit.

roslaunch calibration StagePlate.launch

# The magnet will drive in a spiral pattern to cover the plate.  After a number of cycles, the calibration values should converge.
# Edit calibration.launch with translation vector and quaternion values.
# Ctrl+c to shutdown StagePlate.launch


