/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar/ros/sensing/processing/track_image_contours/msg/ContourInfo.msg */
#ifndef TRACK_IMAGE_CONTOURS_MESSAGE_CONTOURINFO_H
#define TRACK_IMAGE_CONTOURS_MESSAGE_CONTOURINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace track_image_contours
{
template <class ContainerAllocator>
struct ContourInfo_ {
  typedef ContourInfo_<ContainerAllocator> Type;

  ContourInfo_()
  : header()
  , x()
  , y()
  , theta()
  , area()
  , ecc()
  {
  }

  ContourInfo_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , x(_alloc)
  , y(_alloc)
  , theta(_alloc)
  , area(_alloc)
  , ecc(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  x;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  y;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _theta_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  theta;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _area_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  area;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ecc_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  ecc;


  ROS_DEPRECATED uint32_t get_x_size() const { return (uint32_t)x.size(); }
  ROS_DEPRECATED void set_x_size(uint32_t size) { x.resize((size_t)size); }
  ROS_DEPRECATED void get_x_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->x; }
  ROS_DEPRECATED void set_x_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->x = vec; }
  ROS_DEPRECATED uint32_t get_y_size() const { return (uint32_t)y.size(); }
  ROS_DEPRECATED void set_y_size(uint32_t size) { y.resize((size_t)size); }
  ROS_DEPRECATED void get_y_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->y; }
  ROS_DEPRECATED void set_y_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->y = vec; }
  ROS_DEPRECATED uint32_t get_theta_size() const { return (uint32_t)theta.size(); }
  ROS_DEPRECATED void set_theta_size(uint32_t size) { theta.resize((size_t)size); }
  ROS_DEPRECATED void get_theta_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->theta; }
  ROS_DEPRECATED void set_theta_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->theta = vec; }
  ROS_DEPRECATED uint32_t get_area_size() const { return (uint32_t)area.size(); }
  ROS_DEPRECATED void set_area_size(uint32_t size) { area.resize((size_t)size); }
  ROS_DEPRECATED void get_area_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->area; }
  ROS_DEPRECATED void set_area_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->area = vec; }
  ROS_DEPRECATED uint32_t get_ecc_size() const { return (uint32_t)ecc.size(); }
  ROS_DEPRECATED void set_ecc_size(uint32_t size) { ecc.resize((size_t)size); }
  ROS_DEPRECATED void get_ecc_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->ecc; }
  ROS_DEPRECATED void set_ecc_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->ecc = vec; }
private:
  static const char* __s_getDataType_() { return "track_image_contours/ContourInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c8fd16a1f087957d23963303f01c039b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
float64[] x\n\
float64[] y\n\
float64[] theta\n\
float64[] area\n\
float64[] ecc\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, theta);
    ros::serialization::serialize(stream, area);
    ros::serialization::serialize(stream, ecc);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, theta);
    ros::serialization::deserialize(stream, area);
    ros::serialization::deserialize(stream, ecc);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(theta);
    size += ros::serialization::serializationLength(area);
    size += ros::serialization::serializationLength(ecc);
    return size;
  }

  typedef boost::shared_ptr< ::track_image_contours::ContourInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::track_image_contours::ContourInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ContourInfo
typedef  ::track_image_contours::ContourInfo_<std::allocator<void> > ContourInfo;

typedef boost::shared_ptr< ::track_image_contours::ContourInfo> ContourInfoPtr;
typedef boost::shared_ptr< ::track_image_contours::ContourInfo const> ContourInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::track_image_contours::ContourInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::track_image_contours::ContourInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace track_image_contours

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::track_image_contours::ContourInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::track_image_contours::ContourInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::track_image_contours::ContourInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c8fd16a1f087957d23963303f01c039b";
  }

  static const char* value(const  ::track_image_contours::ContourInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc8fd16a1f087957dULL;
  static const uint64_t static_value2 = 0x23963303f01c039bULL;
};

template<class ContainerAllocator>
struct DataType< ::track_image_contours::ContourInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "track_image_contours/ContourInfo";
  }

  static const char* value(const  ::track_image_contours::ContourInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::track_image_contours::ContourInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float64[] x\n\
float64[] y\n\
float64[] theta\n\
float64[] area\n\
float64[] ecc\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::track_image_contours::ContourInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::track_image_contours::ContourInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::track_image_contours::ContourInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::track_image_contours::ContourInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
    stream.next(m.area);
    stream.next(m.ecc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ContourInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::track_image_contours::ContourInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::track_image_contours::ContourInfo_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "area[]" << std::endl;
    for (size_t i = 0; i < v.area.size(); ++i)
    {
      s << indent << "  area[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.area[i]);
    }
    s << indent << "ecc[]" << std::endl;
    for (size_t i = 0; i < v.ecc.size(); ++i)
    {
      s << indent << "  ecc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ecc[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TRACK_IMAGE_CONTOURS_MESSAGE_CONTOURINFO_H

