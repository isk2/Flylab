/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar2/ros/sensing/sensors/joystick_ps3/msg/JoystickValues.msg */
#ifndef JOYSTICK_PS3_MESSAGE_JOYSTICKVALUES_H
#define JOYSTICK_PS3_MESSAGE_JOYSTICKVALUES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace joystick_ps3
{
template <class ContainerAllocator>
struct JoystickValues_ {
  typedef JoystickValues_<ContainerAllocator> Type;

  JoystickValues_()
  : x_left(0.0)
  , y_left(0.0)
  , x_right(0.0)
  , y_right(0.0)
  , up(false)
  , down(false)
  , left(false)
  , right(false)
  , triangle(false)
  , x(false)
  , square(false)
  , circle(false)
  , select(false)
  , start(false)
  , playstation(false)
  , L1(false)
  , L2(false)
  , R1(false)
  , R2(false)
  {
  }

  JoystickValues_(const ContainerAllocator& _alloc)
  : x_left(0.0)
  , y_left(0.0)
  , x_right(0.0)
  , y_right(0.0)
  , up(false)
  , down(false)
  , left(false)
  , right(false)
  , triangle(false)
  , x(false)
  , square(false)
  , circle(false)
  , select(false)
  , start(false)
  , playstation(false)
  , L1(false)
  , L2(false)
  , R1(false)
  , R2(false)
  {
  }

  typedef double _x_left_type;
  double x_left;

  typedef double _y_left_type;
  double y_left;

  typedef double _x_right_type;
  double x_right;

  typedef double _y_right_type;
  double y_right;

  typedef uint8_t _up_type;
  uint8_t up;

  typedef uint8_t _down_type;
  uint8_t down;

  typedef uint8_t _left_type;
  uint8_t left;

  typedef uint8_t _right_type;
  uint8_t right;

  typedef uint8_t _triangle_type;
  uint8_t triangle;

  typedef uint8_t _x_type;
  uint8_t x;

  typedef uint8_t _square_type;
  uint8_t square;

  typedef uint8_t _circle_type;
  uint8_t circle;

  typedef uint8_t _select_type;
  uint8_t select;

  typedef uint8_t _start_type;
  uint8_t start;

  typedef uint8_t _playstation_type;
  uint8_t playstation;

  typedef uint8_t _L1_type;
  uint8_t L1;

  typedef uint8_t _L2_type;
  uint8_t L2;

  typedef uint8_t _R1_type;
  uint8_t R1;

  typedef uint8_t _R2_type;
  uint8_t R2;


private:
  static const char* __s_getDataType_() { return "joystick_ps3/JoystickValues"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f1af9c9ec7eff6b8ec4f182194e49cb3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 x_left\n\
float64 y_left\n\
float64 x_right\n\
float64 y_right\n\
bool up\n\
bool down\n\
bool left\n\
bool right\n\
bool triangle\n\
bool x\n\
bool square\n\
bool circle\n\
bool select\n\
bool start\n\
bool playstation\n\
bool L1\n\
bool L2\n\
bool R1\n\
bool R2\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x_left);
    ros::serialization::serialize(stream, y_left);
    ros::serialization::serialize(stream, x_right);
    ros::serialization::serialize(stream, y_right);
    ros::serialization::serialize(stream, up);
    ros::serialization::serialize(stream, down);
    ros::serialization::serialize(stream, left);
    ros::serialization::serialize(stream, right);
    ros::serialization::serialize(stream, triangle);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, square);
    ros::serialization::serialize(stream, circle);
    ros::serialization::serialize(stream, select);
    ros::serialization::serialize(stream, start);
    ros::serialization::serialize(stream, playstation);
    ros::serialization::serialize(stream, L1);
    ros::serialization::serialize(stream, L2);
    ros::serialization::serialize(stream, R1);
    ros::serialization::serialize(stream, R2);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x_left);
    ros::serialization::deserialize(stream, y_left);
    ros::serialization::deserialize(stream, x_right);
    ros::serialization::deserialize(stream, y_right);
    ros::serialization::deserialize(stream, up);
    ros::serialization::deserialize(stream, down);
    ros::serialization::deserialize(stream, left);
    ros::serialization::deserialize(stream, right);
    ros::serialization::deserialize(stream, triangle);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, square);
    ros::serialization::deserialize(stream, circle);
    ros::serialization::deserialize(stream, select);
    ros::serialization::deserialize(stream, start);
    ros::serialization::deserialize(stream, playstation);
    ros::serialization::deserialize(stream, L1);
    ros::serialization::deserialize(stream, L2);
    ros::serialization::deserialize(stream, R1);
    ros::serialization::deserialize(stream, R2);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x_left);
    size += ros::serialization::serializationLength(y_left);
    size += ros::serialization::serializationLength(x_right);
    size += ros::serialization::serializationLength(y_right);
    size += ros::serialization::serializationLength(up);
    size += ros::serialization::serializationLength(down);
    size += ros::serialization::serializationLength(left);
    size += ros::serialization::serializationLength(right);
    size += ros::serialization::serializationLength(triangle);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(square);
    size += ros::serialization::serializationLength(circle);
    size += ros::serialization::serializationLength(select);
    size += ros::serialization::serializationLength(start);
    size += ros::serialization::serializationLength(playstation);
    size += ros::serialization::serializationLength(L1);
    size += ros::serialization::serializationLength(L2);
    size += ros::serialization::serializationLength(R1);
    size += ros::serialization::serializationLength(R2);
    return size;
  }

  typedef boost::shared_ptr< ::joystick_ps3::JoystickValues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joystick_ps3::JoystickValues_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JoystickValues
typedef  ::joystick_ps3::JoystickValues_<std::allocator<void> > JoystickValues;

typedef boost::shared_ptr< ::joystick_ps3::JoystickValues> JoystickValuesPtr;
typedef boost::shared_ptr< ::joystick_ps3::JoystickValues const> JoystickValuesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::joystick_ps3::JoystickValues_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::joystick_ps3::JoystickValues_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace joystick_ps3

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::joystick_ps3::JoystickValues_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::joystick_ps3::JoystickValues_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::joystick_ps3::JoystickValues_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f1af9c9ec7eff6b8ec4f182194e49cb3";
  }

  static const char* value(const  ::joystick_ps3::JoystickValues_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf1af9c9ec7eff6b8ULL;
  static const uint64_t static_value2 = 0xec4f182194e49cb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::joystick_ps3::JoystickValues_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joystick_ps3/JoystickValues";
  }

  static const char* value(const  ::joystick_ps3::JoystickValues_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joystick_ps3::JoystickValues_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 x_left\n\
float64 y_left\n\
float64 x_right\n\
float64 y_right\n\
bool up\n\
bool down\n\
bool left\n\
bool right\n\
bool triangle\n\
bool x\n\
bool square\n\
bool circle\n\
bool select\n\
bool start\n\
bool playstation\n\
bool L1\n\
bool L2\n\
bool R1\n\
bool R2\n\
";
  }

  static const char* value(const  ::joystick_ps3::JoystickValues_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::joystick_ps3::JoystickValues_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joystick_ps3::JoystickValues_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_left);
    stream.next(m.y_left);
    stream.next(m.x_right);
    stream.next(m.y_right);
    stream.next(m.up);
    stream.next(m.down);
    stream.next(m.left);
    stream.next(m.right);
    stream.next(m.triangle);
    stream.next(m.x);
    stream.next(m.square);
    stream.next(m.circle);
    stream.next(m.select);
    stream.next(m.start);
    stream.next(m.playstation);
    stream.next(m.L1);
    stream.next(m.L2);
    stream.next(m.R1);
    stream.next(m.R2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JoystickValues_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joystick_ps3::JoystickValues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::joystick_ps3::JoystickValues_<ContainerAllocator> & v) 
  {
    s << indent << "x_left: ";
    Printer<double>::stream(s, indent + "  ", v.x_left);
    s << indent << "y_left: ";
    Printer<double>::stream(s, indent + "  ", v.y_left);
    s << indent << "x_right: ";
    Printer<double>::stream(s, indent + "  ", v.x_right);
    s << indent << "y_right: ";
    Printer<double>::stream(s, indent + "  ", v.y_right);
    s << indent << "up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.up);
    s << indent << "down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.down);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "triangle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.triangle);
    s << indent << "x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x);
    s << indent << "square: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.square);
    s << indent << "circle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.circle);
    s << indent << "select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.select);
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "playstation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.playstation);
    s << indent << "L1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L1);
    s << indent << "L2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L2);
    s << indent << "R1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R1);
    s << indent << "R2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // JOYSTICK_PS3_MESSAGE_JOYSTICKVALUES_H

