/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar2/ros/data/save_data/msg/VideoInfo.msg */
#ifndef SAVE_DATA_MESSAGE_VIDEOINFO_H
#define SAVE_DATA_MESSAGE_VIDEOINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace save_data
{
template <class ContainerAllocator>
struct VideoInfo_ {
  typedef VideoInfo_<ContainerAllocator> Type;

  VideoInfo_()
  : ready_for_bag_info(false)
  , ready_to_record(false)
  , saved_video(false)
  {
  }

  VideoInfo_(const ContainerAllocator& _alloc)
  : ready_for_bag_info(false)
  , ready_to_record(false)
  , saved_video(false)
  {
  }

  typedef uint8_t _ready_for_bag_info_type;
  uint8_t ready_for_bag_info;

  typedef uint8_t _ready_to_record_type;
  uint8_t ready_to_record;

  typedef uint8_t _saved_video_type;
  uint8_t saved_video;


private:
  static const char* __s_getDataType_() { return "save_data/VideoInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8b0e55e78ec597bdfc54926b344bac82"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool ready_for_bag_info\n\
bool ready_to_record\n\
bool saved_video\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ready_for_bag_info);
    ros::serialization::serialize(stream, ready_to_record);
    ros::serialization::serialize(stream, saved_video);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ready_for_bag_info);
    ros::serialization::deserialize(stream, ready_to_record);
    ros::serialization::deserialize(stream, saved_video);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ready_for_bag_info);
    size += ros::serialization::serializationLength(ready_to_record);
    size += ros::serialization::serializationLength(saved_video);
    return size;
  }

  typedef boost::shared_ptr< ::save_data::VideoInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::save_data::VideoInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VideoInfo
typedef  ::save_data::VideoInfo_<std::allocator<void> > VideoInfo;

typedef boost::shared_ptr< ::save_data::VideoInfo> VideoInfoPtr;
typedef boost::shared_ptr< ::save_data::VideoInfo const> VideoInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::save_data::VideoInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::save_data::VideoInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace save_data

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::save_data::VideoInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::save_data::VideoInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::save_data::VideoInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b0e55e78ec597bdfc54926b344bac82";
  }

  static const char* value(const  ::save_data::VideoInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8b0e55e78ec597bdULL;
  static const uint64_t static_value2 = 0xfc54926b344bac82ULL;
};

template<class ContainerAllocator>
struct DataType< ::save_data::VideoInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "save_data/VideoInfo";
  }

  static const char* value(const  ::save_data::VideoInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::save_data::VideoInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ready_for_bag_info\n\
bool ready_to_record\n\
bool saved_video\n\
";
  }

  static const char* value(const  ::save_data::VideoInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::save_data::VideoInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::save_data::VideoInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ready_for_bag_info);
    stream.next(m.ready_to_record);
    stream.next(m.saved_video);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VideoInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::save_data::VideoInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::save_data::VideoInfo_<ContainerAllocator> & v) 
  {
    s << indent << "ready_for_bag_info: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_for_bag_info);
    s << indent << "ready_to_record: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_to_record);
    s << indent << "saved_video: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.saved_video);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SAVE_DATA_MESSAGE_VIDEOINFO_H

