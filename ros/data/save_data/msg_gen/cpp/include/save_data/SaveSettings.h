/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar/ros/data/save_data/msg/SaveSettings.msg */
#ifndef SAVE_DATA_MESSAGE_SAVESETTINGS_H
#define SAVE_DATA_MESSAGE_SAVESETTINGS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace save_data
{
template <class ContainerAllocator>
struct SaveSettings_ : public ros::Message
{
  typedef SaveSettings_<ContainerAllocator> Type;

  SaveSettings_()
  : filenamebase()
  , arenastate(false)
  , video(false)
  , bag(false)
  , onlyWhileTriggered(false)
  {
  }

  SaveSettings_(const ContainerAllocator& _alloc)
  : filenamebase(_alloc)
  , arenastate(false)
  , video(false)
  , bag(false)
  , onlyWhileTriggered(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filenamebase_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filenamebase;

  typedef uint8_t _arenastate_type;
  uint8_t arenastate;

  typedef uint8_t _video_type;
  uint8_t video;

  typedef uint8_t _bag_type;
  uint8_t bag;

  typedef uint8_t _onlyWhileTriggered_type;
  uint8_t onlyWhileTriggered;


private:
  static const char* __s_getDataType_() { return "save_data/SaveSettings"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8dd39306b182f140b176cdb1eabbcdf0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string filenamebase\n\
bool arenastate\n\
bool video\n\
bool bag\n\
bool onlyWhileTriggered\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, filenamebase);
    ros::serialization::serialize(stream, arenastate);
    ros::serialization::serialize(stream, video);
    ros::serialization::serialize(stream, bag);
    ros::serialization::serialize(stream, onlyWhileTriggered);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, filenamebase);
    ros::serialization::deserialize(stream, arenastate);
    ros::serialization::deserialize(stream, video);
    ros::serialization::deserialize(stream, bag);
    ros::serialization::deserialize(stream, onlyWhileTriggered);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(filenamebase);
    size += ros::serialization::serializationLength(arenastate);
    size += ros::serialization::serializationLength(video);
    size += ros::serialization::serializationLength(bag);
    size += ros::serialization::serializationLength(onlyWhileTriggered);
    return size;
  }

  typedef boost::shared_ptr< ::save_data::SaveSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::save_data::SaveSettings_<ContainerAllocator>  const> ConstPtr;
}; // struct SaveSettings
typedef  ::save_data::SaveSettings_<std::allocator<void> > SaveSettings;

typedef boost::shared_ptr< ::save_data::SaveSettings> SaveSettingsPtr;
typedef boost::shared_ptr< ::save_data::SaveSettings const> SaveSettingsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::save_data::SaveSettings_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::save_data::SaveSettings_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace save_data

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::save_data::SaveSettings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8dd39306b182f140b176cdb1eabbcdf0";
  }

  static const char* value(const  ::save_data::SaveSettings_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8dd39306b182f140ULL;
  static const uint64_t static_value2 = 0xb176cdb1eabbcdf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::save_data::SaveSettings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "save_data/SaveSettings";
  }

  static const char* value(const  ::save_data::SaveSettings_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::save_data::SaveSettings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string filenamebase\n\
bool arenastate\n\
bool video\n\
bool bag\n\
bool onlyWhileTriggered\n\
\n\
\n\
";
  }

  static const char* value(const  ::save_data::SaveSettings_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::save_data::SaveSettings_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filenamebase);
    stream.next(m.arenastate);
    stream.next(m.video);
    stream.next(m.bag);
    stream.next(m.onlyWhileTriggered);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SaveSettings_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::save_data::SaveSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::save_data::SaveSettings_<ContainerAllocator> & v) 
  {
    s << indent << "filenamebase: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filenamebase);
    s << indent << "arenastate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arenastate);
    s << indent << "video: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.video);
    s << indent << "bag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bag);
    s << indent << "onlyWhileTriggered: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.onlyWhileTriggered);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SAVE_DATA_MESSAGE_SAVESETTINGS_H

