/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar2/ros/data/save_data/msg/BagInfo.msg */
#ifndef SAVE_DATA_MESSAGE_BAGINFO_H
#define SAVE_DATA_MESSAGE_BAGINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace save_data
{
template <class ContainerAllocator>
struct BagInfo_ {
  typedef BagInfo_<ContainerAllocator> Type;

  BagInfo_()
  : bag_name()
  , ready_to_play(false)
  , finished_playing(false)
  , end_of_bag_files(false)
  {
  }

  BagInfo_(const ContainerAllocator& _alloc)
  : bag_name(_alloc)
  , ready_to_play(false)
  , finished_playing(false)
  , end_of_bag_files(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bag_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  bag_name;

  typedef uint8_t _ready_to_play_type;
  uint8_t ready_to_play;

  typedef uint8_t _finished_playing_type;
  uint8_t finished_playing;

  typedef uint8_t _end_of_bag_files_type;
  uint8_t end_of_bag_files;


private:
  static const char* __s_getDataType_() { return "save_data/BagInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b71b65006fb36de257123959aa9c21a2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string bag_name\n\
bool ready_to_play\n\
bool finished_playing\n\
bool end_of_bag_files\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, bag_name);
    ros::serialization::serialize(stream, ready_to_play);
    ros::serialization::serialize(stream, finished_playing);
    ros::serialization::serialize(stream, end_of_bag_files);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, bag_name);
    ros::serialization::deserialize(stream, ready_to_play);
    ros::serialization::deserialize(stream, finished_playing);
    ros::serialization::deserialize(stream, end_of_bag_files);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(bag_name);
    size += ros::serialization::serializationLength(ready_to_play);
    size += ros::serialization::serializationLength(finished_playing);
    size += ros::serialization::serializationLength(end_of_bag_files);
    return size;
  }

  typedef boost::shared_ptr< ::save_data::BagInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::save_data::BagInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BagInfo
typedef  ::save_data::BagInfo_<std::allocator<void> > BagInfo;

typedef boost::shared_ptr< ::save_data::BagInfo> BagInfoPtr;
typedef boost::shared_ptr< ::save_data::BagInfo const> BagInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::save_data::BagInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::save_data::BagInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace save_data

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::save_data::BagInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::save_data::BagInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::save_data::BagInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b71b65006fb36de257123959aa9c21a2";
  }

  static const char* value(const  ::save_data::BagInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb71b65006fb36de2ULL;
  static const uint64_t static_value2 = 0x57123959aa9c21a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::save_data::BagInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "save_data/BagInfo";
  }

  static const char* value(const  ::save_data::BagInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::save_data::BagInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string bag_name\n\
bool ready_to_play\n\
bool finished_playing\n\
bool end_of_bag_files\n\
";
  }

  static const char* value(const  ::save_data::BagInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::save_data::BagInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bag_name);
    stream.next(m.ready_to_play);
    stream.next(m.finished_playing);
    stream.next(m.end_of_bag_files);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BagInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::save_data::BagInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::save_data::BagInfo_<ContainerAllocator> & v) 
  {
    s << indent << "bag_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bag_name);
    s << indent << "ready_to_play: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_to_play);
    s << indent << "finished_playing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finished_playing);
    s << indent << "end_of_bag_files: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.end_of_bag_files);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SAVE_DATA_MESSAGE_BAGINFO_H

