"""autogenerated by genmsg_py from SaveSettings.msg. Do not edit."""
import roslib.message
import struct


class SaveSettings(roslib.message.Message):
  _md5sum = "8dd39306b182f140b176cdb1eabbcdf0"
  _type = "save_data/SaveSettings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string filenamebase
bool arenastate
bool video
bool bag
bool onlyWhileTriggered


"""
  __slots__ = ['filenamebase','arenastate','video','bag','onlyWhileTriggered']
  _slot_types = ['string','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       filenamebase,arenastate,video,bag,onlyWhileTriggered
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SaveSettings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filenamebase is None:
        self.filenamebase = ''
      if self.arenastate is None:
        self.arenastate = False
      if self.video is None:
        self.video = False
      if self.bag is None:
        self.bag = False
      if self.onlyWhileTriggered is None:
        self.onlyWhileTriggered = False
    else:
      self.filenamebase = ''
      self.arenastate = False
      self.video = False
      self.bag = False
      self.onlyWhileTriggered = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.filenamebase
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4B.pack(_x.arenastate, _x.video, _x.bag, _x.onlyWhileTriggered))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filenamebase = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.arenastate, _x.video, _x.bag, _x.onlyWhileTriggered,) = _struct_4B.unpack(str[start:end])
      self.arenastate = bool(self.arenastate)
      self.video = bool(self.video)
      self.bag = bool(self.bag)
      self.onlyWhileTriggered = bool(self.onlyWhileTriggered)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.filenamebase
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4B.pack(_x.arenastate, _x.video, _x.bag, _x.onlyWhileTriggered))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.filenamebase = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.arenastate, _x.video, _x.bag, _x.onlyWhileTriggered,) = _struct_4B.unpack(str[start:end])
      self.arenastate = bool(self.arenastate)
      self.video = bool(self.video)
      self.bag = bool(self.bag)
      self.onlyWhileTriggered = bool(self.onlyWhileTriggered)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4B = struct.Struct("<4B")
