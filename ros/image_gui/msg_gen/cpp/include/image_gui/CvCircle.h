/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar2/ros/image_gui/msg/CvCircle.msg */
#ifndef IMAGE_GUI_MESSAGE_CVCIRCLE_H
#define IMAGE_GUI_MESSAGE_CVCIRCLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "image_gui/CvPoint.h"
#include "image_gui/CvColor.h"

namespace image_gui
{
template <class ContainerAllocator>
struct CvCircle_ {
  typedef CvCircle_<ContainerAllocator> Type;

  CvCircle_()
  : center()
  , radius(0)
  , color()
  , thickness(0)
  , lineType(0)
  , shift(0)
  {
  }

  CvCircle_(const ContainerAllocator& _alloc)
  : center(_alloc)
  , radius(0)
  , color(_alloc)
  , thickness(0)
  , lineType(0)
  , shift(0)
  {
  }

  typedef  ::image_gui::CvPoint_<ContainerAllocator>  _center_type;
   ::image_gui::CvPoint_<ContainerAllocator>  center;

  typedef int32_t _radius_type;
  int32_t radius;

  typedef  ::image_gui::CvColor_<ContainerAllocator>  _color_type;
   ::image_gui::CvColor_<ContainerAllocator>  color;

  typedef int32_t _thickness_type;
  int32_t thickness;

  typedef int32_t _lineType_type;
  int32_t lineType;

  typedef int32_t _shift_type;
  int32_t shift;


private:
  static const char* __s_getDataType_() { return "image_gui/CvCircle"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a60e9679b4eefa3cfeca04ca12c0783c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "CvPoint center\n\
int32 radius\n\
CvColor color\n\
int32 thickness\n\
int32 lineType\n\
int32 shift\n\
================================================================================\n\
MSG: image_gui/CvPoint\n\
int32 x\n\
int32 y\n\
\n\
================================================================================\n\
MSG: image_gui/CvColor\n\
float64 red\n\
float64 green\n\
float64 blue\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, center);
    ros::serialization::serialize(stream, radius);
    ros::serialization::serialize(stream, color);
    ros::serialization::serialize(stream, thickness);
    ros::serialization::serialize(stream, lineType);
    ros::serialization::serialize(stream, shift);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, center);
    ros::serialization::deserialize(stream, radius);
    ros::serialization::deserialize(stream, color);
    ros::serialization::deserialize(stream, thickness);
    ros::serialization::deserialize(stream, lineType);
    ros::serialization::deserialize(stream, shift);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(center);
    size += ros::serialization::serializationLength(radius);
    size += ros::serialization::serializationLength(color);
    size += ros::serialization::serializationLength(thickness);
    size += ros::serialization::serializationLength(lineType);
    size += ros::serialization::serializationLength(shift);
    return size;
  }

  typedef boost::shared_ptr< ::image_gui::CvCircle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_gui::CvCircle_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CvCircle
typedef  ::image_gui::CvCircle_<std::allocator<void> > CvCircle;

typedef boost::shared_ptr< ::image_gui::CvCircle> CvCirclePtr;
typedef boost::shared_ptr< ::image_gui::CvCircle const> CvCircleConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::image_gui::CvCircle_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::image_gui::CvCircle_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace image_gui

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_gui::CvCircle_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_gui::CvCircle_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_gui::CvCircle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a60e9679b4eefa3cfeca04ca12c0783c";
  }

  static const char* value(const  ::image_gui::CvCircle_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa60e9679b4eefa3cULL;
  static const uint64_t static_value2 = 0xfeca04ca12c0783cULL;
};

template<class ContainerAllocator>
struct DataType< ::image_gui::CvCircle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_gui/CvCircle";
  }

  static const char* value(const  ::image_gui::CvCircle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_gui::CvCircle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CvPoint center\n\
int32 radius\n\
CvColor color\n\
int32 thickness\n\
int32 lineType\n\
int32 shift\n\
================================================================================\n\
MSG: image_gui/CvPoint\n\
int32 x\n\
int32 y\n\
\n\
================================================================================\n\
MSG: image_gui/CvColor\n\
float64 red\n\
float64 green\n\
float64 blue\n\
";
  }

  static const char* value(const  ::image_gui::CvCircle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::image_gui::CvCircle_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_gui::CvCircle_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.center);
    stream.next(m.radius);
    stream.next(m.color);
    stream.next(m.thickness);
    stream.next(m.lineType);
    stream.next(m.shift);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CvCircle_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_gui::CvCircle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::image_gui::CvCircle_<ContainerAllocator> & v) 
  {
    s << indent << "center: ";
s << std::endl;
    Printer< ::image_gui::CvPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radius);
    s << indent << "color: ";
s << std::endl;
    Printer< ::image_gui::CvColor_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "thickness: ";
    Printer<int32_t>::stream(s, indent + "  ", v.thickness);
    s << indent << "lineType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lineType);
    s << indent << "shift: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shift);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IMAGE_GUI_MESSAGE_CVCIRCLE_H

