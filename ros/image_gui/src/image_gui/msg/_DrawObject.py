"""autogenerated by genmsg_py from DrawObject.msg. Do not edit."""
import roslib.message
import struct

import image_gui.msg

class DrawObject(roslib.message.Message):
  _md5sum = "2384beb9729e341fbbc183cc2845fddf"
  _type = "image_gui/DrawObject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool show
CvPoint object_center
CvLine[] line_list
CvCircle[] circle_list
================================================================================
MSG: image_gui/CvPoint
int32 x
int32 y

================================================================================
MSG: image_gui/CvLine
CvPoint point1
CvPoint point2
CvColor color
int32 thickness
int32 lineType
int32 shift
================================================================================
MSG: image_gui/CvColor
float64 red
float64 green
float64 blue
================================================================================
MSG: image_gui/CvCircle
CvPoint center
int32 radius
CvColor color
int32 thickness
int32 lineType
int32 shift
"""
  __slots__ = ['show','object_center','line_list','circle_list']
  _slot_types = ['bool','image_gui/CvPoint','image_gui/CvLine[]','image_gui/CvCircle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       show,object_center,line_list,circle_list
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(DrawObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.show is None:
        self.show = False
      if self.object_center is None:
        self.object_center = image_gui.msg.CvPoint()
      if self.line_list is None:
        self.line_list = []
      if self.circle_list is None:
        self.circle_list = []
    else:
      self.show = False
      self.object_center = image_gui.msg.CvPoint()
      self.line_list = []
      self.circle_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_B2i.pack(_x.show, _x.object_center.x, _x.object_center.y))
      length = len(self.line_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_list:
        _v1 = val1.point1
        _x = _v1
        buff.write(_struct_2i.pack(_x.x, _x.y))
        _v2 = val1.point2
        _x = _v2
        buff.write(_struct_2i.pack(_x.x, _x.y))
        _v3 = val1.color
        _x = _v3
        buff.write(_struct_3d.pack(_x.red, _x.green, _x.blue))
        _x = val1
        buff.write(_struct_3i.pack(_x.thickness, _x.lineType, _x.shift))
      length = len(self.circle_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.circle_list:
        _v4 = val1.center
        _x = _v4
        buff.write(_struct_2i.pack(_x.x, _x.y))
        buff.write(_struct_i.pack(val1.radius))
        _v5 = val1.color
        _x = _v5
        buff.write(_struct_3d.pack(_x.red, _x.green, _x.blue))
        _x = val1
        buff.write(_struct_3i.pack(_x.thickness, _x.lineType, _x.shift))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.object_center is None:
        self.object_center = image_gui.msg.CvPoint()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.show, _x.object_center.x, _x.object_center.y,) = _struct_B2i.unpack(str[start:end])
      self.show = bool(self.show)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_list = []
      for i in range(0, length):
        val1 = image_gui.msg.CvLine()
        _v6 = val1.point1
        _x = _v6
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        _v7 = val1.point2
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        _v8 = val1.color
        _x = _v8
        start = end
        end += 24
        (_x.red, _x.green, _x.blue,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.thickness, _x.lineType, _x.shift,) = _struct_3i.unpack(str[start:end])
        self.line_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.circle_list = []
      for i in range(0, length):
        val1 = image_gui.msg.CvCircle()
        _v9 = val1.center
        _x = _v9
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (val1.radius,) = _struct_i.unpack(str[start:end])
        _v10 = val1.color
        _x = _v10
        start = end
        end += 24
        (_x.red, _x.green, _x.blue,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.thickness, _x.lineType, _x.shift,) = _struct_3i.unpack(str[start:end])
        self.circle_list.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_B2i.pack(_x.show, _x.object_center.x, _x.object_center.y))
      length = len(self.line_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_list:
        _v11 = val1.point1
        _x = _v11
        buff.write(_struct_2i.pack(_x.x, _x.y))
        _v12 = val1.point2
        _x = _v12
        buff.write(_struct_2i.pack(_x.x, _x.y))
        _v13 = val1.color
        _x = _v13
        buff.write(_struct_3d.pack(_x.red, _x.green, _x.blue))
        _x = val1
        buff.write(_struct_3i.pack(_x.thickness, _x.lineType, _x.shift))
      length = len(self.circle_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.circle_list:
        _v14 = val1.center
        _x = _v14
        buff.write(_struct_2i.pack(_x.x, _x.y))
        buff.write(_struct_i.pack(val1.radius))
        _v15 = val1.color
        _x = _v15
        buff.write(_struct_3d.pack(_x.red, _x.green, _x.blue))
        _x = val1
        buff.write(_struct_3i.pack(_x.thickness, _x.lineType, _x.shift))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.object_center is None:
        self.object_center = image_gui.msg.CvPoint()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.show, _x.object_center.x, _x.object_center.y,) = _struct_B2i.unpack(str[start:end])
      self.show = bool(self.show)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_list = []
      for i in range(0, length):
        val1 = image_gui.msg.CvLine()
        _v16 = val1.point1
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        _v17 = val1.point2
        _x = _v17
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        _v18 = val1.color
        _x = _v18
        start = end
        end += 24
        (_x.red, _x.green, _x.blue,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.thickness, _x.lineType, _x.shift,) = _struct_3i.unpack(str[start:end])
        self.line_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.circle_list = []
      for i in range(0, length):
        val1 = image_gui.msg.CvCircle()
        _v19 = val1.center
        _x = _v19
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (val1.radius,) = _struct_i.unpack(str[start:end])
        _v20 = val1.color
        _x = _v20
        start = end
        end += 24
        (_x.red, _x.green, _x.blue,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.thickness, _x.lineType, _x.shift,) = _struct_3i.unpack(str[start:end])
        self.circle_list.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
_struct_3i = struct.Struct("<3i")
_struct_2i = struct.Struct("<2i")
_struct_B2i = struct.Struct("<B2i")
_struct_3d = struct.Struct("<3d")
