/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar2/ros/experiments/msg/MoveSettings.msg */
#ifndef EXPERIMENTS_MESSAGE_MOVESETTINGS_H
#define EXPERIMENTS_MESSAGE_MOVESETTINGS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace experiments
{
template <class ContainerAllocator>
struct MoveSettings_ {
  typedef MoveSettings_<ContainerAllocator> Type;

  MoveSettings_()
  : enabled(false)
  , tracking(false)
  , frameidOriginPosition()
  , frameidOriginAngle()
  , distance(0.0)
  , angle(0.0)
  , angleType()
  , speed(0.0)
  , speedType()
  , tolerance(0.0)
  , timeout(0.0)
  {
  }

  MoveSettings_(const ContainerAllocator& _alloc)
  : enabled(false)
  , tracking(false)
  , frameidOriginPosition(_alloc)
  , frameidOriginAngle(_alloc)
  , distance(0.0)
  , angle(0.0)
  , angleType(_alloc)
  , speed(0.0)
  , speedType(_alloc)
  , tolerance(0.0)
  , timeout(0.0)
  {
  }

  typedef uint8_t _enabled_type;
  uint8_t enabled;

  typedef uint8_t _tracking_type;
  uint8_t tracking;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frameidOriginPosition_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frameidOriginPosition;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frameidOriginAngle_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frameidOriginAngle;

  typedef double _distance_type;
  double distance;

  typedef double _angle_type;
  double angle;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _angleType_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  angleType;

  typedef double _speed_type;
  double speed;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _speedType_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  speedType;

  typedef double _tolerance_type;
  double tolerance;

  typedef double _timeout_type;
  double timeout;


private:
  static const char* __s_getDataType_() { return "experiments/MoveSettings"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "47116853e5153e6d4a5bb554108d2128"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool enabled\n\
bool tracking\n\
string frameidOriginPosition # 'Plate' or 'Robot' or 'Fly'\n\
string frameidOriginAngle # 'Plate' or 'Robot' or 'Fly'\n\
float64 distance\n\
float64 angle\n\
string angleType # 'random' or 'constant'\n\
float64 speed\n\
string speedType # 'random' or 'constant'\n\
float64 tolerance\n\
float64 timeout\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, enabled);
    ros::serialization::serialize(stream, tracking);
    ros::serialization::serialize(stream, frameidOriginPosition);
    ros::serialization::serialize(stream, frameidOriginAngle);
    ros::serialization::serialize(stream, distance);
    ros::serialization::serialize(stream, angle);
    ros::serialization::serialize(stream, angleType);
    ros::serialization::serialize(stream, speed);
    ros::serialization::serialize(stream, speedType);
    ros::serialization::serialize(stream, tolerance);
    ros::serialization::serialize(stream, timeout);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, enabled);
    ros::serialization::deserialize(stream, tracking);
    ros::serialization::deserialize(stream, frameidOriginPosition);
    ros::serialization::deserialize(stream, frameidOriginAngle);
    ros::serialization::deserialize(stream, distance);
    ros::serialization::deserialize(stream, angle);
    ros::serialization::deserialize(stream, angleType);
    ros::serialization::deserialize(stream, speed);
    ros::serialization::deserialize(stream, speedType);
    ros::serialization::deserialize(stream, tolerance);
    ros::serialization::deserialize(stream, timeout);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(enabled);
    size += ros::serialization::serializationLength(tracking);
    size += ros::serialization::serializationLength(frameidOriginPosition);
    size += ros::serialization::serializationLength(frameidOriginAngle);
    size += ros::serialization::serializationLength(distance);
    size += ros::serialization::serializationLength(angle);
    size += ros::serialization::serializationLength(angleType);
    size += ros::serialization::serializationLength(speed);
    size += ros::serialization::serializationLength(speedType);
    size += ros::serialization::serializationLength(tolerance);
    size += ros::serialization::serializationLength(timeout);
    return size;
  }

  typedef boost::shared_ptr< ::experiments::MoveSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::experiments::MoveSettings_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveSettings
typedef  ::experiments::MoveSettings_<std::allocator<void> > MoveSettings;

typedef boost::shared_ptr< ::experiments::MoveSettings> MoveSettingsPtr;
typedef boost::shared_ptr< ::experiments::MoveSettings const> MoveSettingsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::experiments::MoveSettings_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::experiments::MoveSettings_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace experiments

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::experiments::MoveSettings_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::experiments::MoveSettings_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::experiments::MoveSettings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "47116853e5153e6d4a5bb554108d2128";
  }

  static const char* value(const  ::experiments::MoveSettings_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x47116853e5153e6dULL;
  static const uint64_t static_value2 = 0x4a5bb554108d2128ULL;
};

template<class ContainerAllocator>
struct DataType< ::experiments::MoveSettings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "experiments/MoveSettings";
  }

  static const char* value(const  ::experiments::MoveSettings_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::experiments::MoveSettings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool enabled\n\
bool tracking\n\
string frameidOriginPosition # 'Plate' or 'Robot' or 'Fly'\n\
string frameidOriginAngle # 'Plate' or 'Robot' or 'Fly'\n\
float64 distance\n\
float64 angle\n\
string angleType # 'random' or 'constant'\n\
float64 speed\n\
string speedType # 'random' or 'constant'\n\
float64 tolerance\n\
float64 timeout\n\
\n\
\n\
";
  }

  static const char* value(const  ::experiments::MoveSettings_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::experiments::MoveSettings_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.enabled);
    stream.next(m.tracking);
    stream.next(m.frameidOriginPosition);
    stream.next(m.frameidOriginAngle);
    stream.next(m.distance);
    stream.next(m.angle);
    stream.next(m.angleType);
    stream.next(m.speed);
    stream.next(m.speedType);
    stream.next(m.tolerance);
    stream.next(m.timeout);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveSettings_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::experiments::MoveSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::experiments::MoveSettings_<ContainerAllocator> & v) 
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracking);
    s << indent << "frameidOriginPosition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frameidOriginPosition);
    s << indent << "frameidOriginAngle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frameidOriginAngle);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "angleType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.angleType);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "speedType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.speedType);
    s << indent << "tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance);
    s << indent << "timeout: ";
    Printer<double>::stream(s, indent + "  ", v.timeout);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXPERIMENTS_MESSAGE_MOVESETTINGS_H

