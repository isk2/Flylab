"""autogenerated by genmsg_py from FlyView.msg. Do not edit."""
import roslib.message
import struct


class FlyView(roslib.message.Message):
  _md5sum = "d3b7acfeacb7f132972aed28543a3ffa"
  _type = "plate_tf/FlyView"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 robot_position_x
float64 robot_position_y
float64 robot_angle
float64 robot_distance

"""
  __slots__ = ['robot_position_x','robot_position_y','robot_angle','robot_distance']
  _slot_types = ['float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       robot_position_x,robot_position_y,robot_angle,robot_distance
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(FlyView, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_position_x is None:
        self.robot_position_x = 0.
      if self.robot_position_y is None:
        self.robot_position_y = 0.
      if self.robot_angle is None:
        self.robot_angle = 0.
      if self.robot_distance is None:
        self.robot_distance = 0.
    else:
      self.robot_position_x = 0.
      self.robot_position_y = 0.
      self.robot_angle = 0.
      self.robot_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4d.pack(_x.robot_position_x, _x.robot_position_y, _x.robot_angle, _x.robot_distance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.robot_position_x, _x.robot_position_y, _x.robot_angle, _x.robot_distance,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4d.pack(_x.robot_position_x, _x.robot_position_y, _x.robot_angle, _x.robot_distance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.robot_position_x, _x.robot_position_y, _x.robot_angle, _x.robot_distance,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4d = struct.Struct("<4d")
