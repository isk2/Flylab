/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flyatar2/ros/tf/plate_tf/srv/PlateCameraConversion.srv */
#ifndef PLATE_TF_SERVICE_PLATECAMERACONVERSION_H
#define PLATE_TF_SERVICE_PLATECAMERACONVERSION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace plate_tf
{
template <class ContainerAllocator>
struct PlateCameraConversionRequest_ {
  typedef PlateCameraConversionRequest_<ContainerAllocator> Type;

  PlateCameraConversionRequest_()
  : Xsrc()
  , Ysrc()
  {
  }

  PlateCameraConversionRequest_(const ContainerAllocator& _alloc)
  : Xsrc(_alloc)
  , Ysrc(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Xsrc_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  Xsrc;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Ysrc_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  Ysrc;


  ROS_DEPRECATED uint32_t get_Xsrc_size() const { return (uint32_t)Xsrc.size(); }
  ROS_DEPRECATED void set_Xsrc_size(uint32_t size) { Xsrc.resize((size_t)size); }
  ROS_DEPRECATED void get_Xsrc_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->Xsrc; }
  ROS_DEPRECATED void set_Xsrc_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->Xsrc = vec; }
  ROS_DEPRECATED uint32_t get_Ysrc_size() const { return (uint32_t)Ysrc.size(); }
  ROS_DEPRECATED void set_Ysrc_size(uint32_t size) { Ysrc.resize((size_t)size); }
  ROS_DEPRECATED void get_Ysrc_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->Ysrc; }
  ROS_DEPRECATED void set_Ysrc_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->Ysrc = vec; }
private:
  static const char* __s_getDataType_() { return "plate_tf/PlateCameraConversionRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "dadc981f505ddea0841a3922fdd33de4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "73706dcabefa494de10216f0b3e1c890"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64[] Xsrc\n\
float64[] Ysrc\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Xsrc);
    ros::serialization::serialize(stream, Ysrc);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Xsrc);
    ros::serialization::deserialize(stream, Ysrc);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Xsrc);
    size += ros::serialization::serializationLength(Ysrc);
    return size;
  }

  typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlateCameraConversionRequest
typedef  ::plate_tf::PlateCameraConversionRequest_<std::allocator<void> > PlateCameraConversionRequest;

typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionRequest> PlateCameraConversionRequestPtr;
typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionRequest const> PlateCameraConversionRequestConstPtr;


template <class ContainerAllocator>
struct PlateCameraConversionResponse_ {
  typedef PlateCameraConversionResponse_<ContainerAllocator> Type;

  PlateCameraConversionResponse_()
  : Xdst()
  , Ydst()
  {
  }

  PlateCameraConversionResponse_(const ContainerAllocator& _alloc)
  : Xdst(_alloc)
  , Ydst(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Xdst_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  Xdst;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Ydst_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  Ydst;


  ROS_DEPRECATED uint32_t get_Xdst_size() const { return (uint32_t)Xdst.size(); }
  ROS_DEPRECATED void set_Xdst_size(uint32_t size) { Xdst.resize((size_t)size); }
  ROS_DEPRECATED void get_Xdst_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->Xdst; }
  ROS_DEPRECATED void set_Xdst_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->Xdst = vec; }
  ROS_DEPRECATED uint32_t get_Ydst_size() const { return (uint32_t)Ydst.size(); }
  ROS_DEPRECATED void set_Ydst_size(uint32_t size) { Ydst.resize((size_t)size); }
  ROS_DEPRECATED void get_Ydst_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->Ydst; }
  ROS_DEPRECATED void set_Ydst_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->Ydst = vec; }
private:
  static const char* __s_getDataType_() { return "plate_tf/PlateCameraConversionResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "12668e153c72024ad4d14819f42324b1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "73706dcabefa494de10216f0b3e1c890"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64[] Xdst\n\
float64[] Ydst\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Xdst);
    ros::serialization::serialize(stream, Ydst);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Xdst);
    ros::serialization::deserialize(stream, Ydst);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Xdst);
    size += ros::serialization::serializationLength(Ydst);
    return size;
  }

  typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlateCameraConversionResponse
typedef  ::plate_tf::PlateCameraConversionResponse_<std::allocator<void> > PlateCameraConversionResponse;

typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionResponse> PlateCameraConversionResponsePtr;
typedef boost::shared_ptr< ::plate_tf::PlateCameraConversionResponse const> PlateCameraConversionResponseConstPtr;

struct PlateCameraConversion
{

typedef PlateCameraConversionRequest Request;
typedef PlateCameraConversionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PlateCameraConversion
} // namespace plate_tf

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dadc981f505ddea0841a3922fdd33de4";
  }

  static const char* value(const  ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdadc981f505ddea0ULL;
  static const uint64_t static_value2 = 0x841a3922fdd33de4ULL;
};

template<class ContainerAllocator>
struct DataType< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "plate_tf/PlateCameraConversionRequest";
  }

  static const char* value(const  ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] Xsrc\n\
float64[] Ysrc\n\
\n\
";
  }

  static const char* value(const  ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "12668e153c72024ad4d14819f42324b1";
  }

  static const char* value(const  ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x12668e153c72024aULL;
  static const uint64_t static_value2 = 0xd4d14819f42324b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "plate_tf/PlateCameraConversionResponse";
  }

  static const char* value(const  ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] Xdst\n\
float64[] Ydst\n\
\n\
";
  }

  static const char* value(const  ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::plate_tf::PlateCameraConversionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Xsrc);
    stream.next(m.Ysrc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlateCameraConversionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::plate_tf::PlateCameraConversionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Xdst);
    stream.next(m.Ydst);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlateCameraConversionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<plate_tf::PlateCameraConversion> {
  static const char* value() 
  {
    return "73706dcabefa494de10216f0b3e1c890";
  }

  static const char* value(const plate_tf::PlateCameraConversion&) { return value(); } 
};

template<>
struct DataType<plate_tf::PlateCameraConversion> {
  static const char* value() 
  {
    return "plate_tf/PlateCameraConversion";
  }

  static const char* value(const plate_tf::PlateCameraConversion&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "73706dcabefa494de10216f0b3e1c890";
  }

  static const char* value(const plate_tf::PlateCameraConversionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<plate_tf::PlateCameraConversionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "plate_tf/PlateCameraConversion";
  }

  static const char* value(const plate_tf::PlateCameraConversionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "73706dcabefa494de10216f0b3e1c890";
  }

  static const char* value(const plate_tf::PlateCameraConversionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<plate_tf::PlateCameraConversionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "plate_tf/PlateCameraConversion";
  }

  static const char* value(const plate_tf::PlateCameraConversionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PLATE_TF_SERVICE_PLATECAMERACONVERSION_H

