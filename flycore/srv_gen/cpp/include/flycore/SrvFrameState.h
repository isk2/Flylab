/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flylab/flycore/srv/SrvFrameState.srv */
#ifndef FLYCORE_SERVICE_SRVFRAMESTATE_H
#define FLYCORE_SERVICE_SRVFRAMESTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "flycore/MsgFrameState.h"


#include "flycore/MsgFrameState.h"

namespace flycore
{
template <class ContainerAllocator>
struct SrvFrameStateRequest_ {
  typedef SrvFrameStateRequest_<ContainerAllocator> Type;

  SrvFrameStateRequest_()
  : state()
  , speed(0.0)
  {
  }

  SrvFrameStateRequest_(const ContainerAllocator& _alloc)
  : state(_alloc)
  , speed(0.0)
  {
  }

  typedef  ::flycore::MsgFrameState_<ContainerAllocator>  _state_type;
   ::flycore::MsgFrameState_<ContainerAllocator>  state;

  typedef double _speed_type;
  double speed;


private:
  static const char* __s_getDataType_() { return "flycore/SrvFrameStateRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7a56fa867b82f14dad61e4fac002dbaf"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a77943b8f87f5da957e62998e6d39b03"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "MsgFrameState state\n\
float64 speed\n\
\n\
================================================================================\n\
MSG: flycore/MsgFrameState\n\
Header header\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist velocity\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    ros::serialization::serialize(stream, speed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    ros::serialization::deserialize(stream, speed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    size += ros::serialization::serializationLength(speed);
    return size;
  }

  typedef boost::shared_ptr< ::flycore::SrvFrameStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flycore::SrvFrameStateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvFrameStateRequest
typedef  ::flycore::SrvFrameStateRequest_<std::allocator<void> > SrvFrameStateRequest;

typedef boost::shared_ptr< ::flycore::SrvFrameStateRequest> SrvFrameStateRequestPtr;
typedef boost::shared_ptr< ::flycore::SrvFrameStateRequest const> SrvFrameStateRequestConstPtr;


template <class ContainerAllocator>
struct SrvFrameStateResponse_ {
  typedef SrvFrameStateResponse_<ContainerAllocator> Type;

  SrvFrameStateResponse_()
  : state()
  {
  }

  SrvFrameStateResponse_(const ContainerAllocator& _alloc)
  : state(_alloc)
  {
  }

  typedef  ::flycore::MsgFrameState_<ContainerAllocator>  _state_type;
   ::flycore::MsgFrameState_<ContainerAllocator>  state;


private:
  static const char* __s_getDataType_() { return "flycore/SrvFrameStateResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1977707d7eabf7e0ca765b9e57161cd5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a77943b8f87f5da957e62998e6d39b03"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "MsgFrameState state\n\
\n\
\n\
\n\
================================================================================\n\
MSG: flycore/MsgFrameState\n\
Header header\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist velocity\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    return size;
  }

  typedef boost::shared_ptr< ::flycore::SrvFrameStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flycore::SrvFrameStateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvFrameStateResponse
typedef  ::flycore::SrvFrameStateResponse_<std::allocator<void> > SrvFrameStateResponse;

typedef boost::shared_ptr< ::flycore::SrvFrameStateResponse> SrvFrameStateResponsePtr;
typedef boost::shared_ptr< ::flycore::SrvFrameStateResponse const> SrvFrameStateResponseConstPtr;

struct SrvFrameState
{

typedef SrvFrameStateRequest Request;
typedef SrvFrameStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SrvFrameState
} // namespace flycore

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::flycore::SrvFrameStateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::flycore::SrvFrameStateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::flycore::SrvFrameStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7a56fa867b82f14dad61e4fac002dbaf";
  }

  static const char* value(const  ::flycore::SrvFrameStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7a56fa867b82f14dULL;
  static const uint64_t static_value2 = 0xad61e4fac002dbafULL;
};

template<class ContainerAllocator>
struct DataType< ::flycore::SrvFrameStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flycore/SrvFrameStateRequest";
  }

  static const char* value(const  ::flycore::SrvFrameStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flycore::SrvFrameStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "MsgFrameState state\n\
float64 speed\n\
\n\
================================================================================\n\
MSG: flycore/MsgFrameState\n\
Header header\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist velocity\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::flycore::SrvFrameStateRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::flycore::SrvFrameStateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::flycore::SrvFrameStateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::flycore::SrvFrameStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1977707d7eabf7e0ca765b9e57161cd5";
  }

  static const char* value(const  ::flycore::SrvFrameStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1977707d7eabf7e0ULL;
  static const uint64_t static_value2 = 0xca765b9e57161cd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::flycore::SrvFrameStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flycore/SrvFrameStateResponse";
  }

  static const char* value(const  ::flycore::SrvFrameStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flycore::SrvFrameStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "MsgFrameState state\n\
\n\
\n\
\n\
================================================================================\n\
MSG: flycore/MsgFrameState\n\
Header header\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist velocity\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::flycore::SrvFrameStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flycore::SrvFrameStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvFrameStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flycore::SrvFrameStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvFrameStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<flycore::SrvFrameState> {
  static const char* value() 
  {
    return "a77943b8f87f5da957e62998e6d39b03";
  }

  static const char* value(const flycore::SrvFrameState&) { return value(); } 
};

template<>
struct DataType<flycore::SrvFrameState> {
  static const char* value() 
  {
    return "flycore/SrvFrameState";
  }

  static const char* value(const flycore::SrvFrameState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<flycore::SrvFrameStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a77943b8f87f5da957e62998e6d39b03";
  }

  static const char* value(const flycore::SrvFrameStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<flycore::SrvFrameStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flycore/SrvFrameState";
  }

  static const char* value(const flycore::SrvFrameStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<flycore::SrvFrameStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a77943b8f87f5da957e62998e6d39b03";
  }

  static const char* value(const flycore::SrvFrameStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<flycore::SrvFrameStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flycore/SrvFrameState";
  }

  static const char* value(const flycore::SrvFrameStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FLYCORE_SERVICE_SRVFRAMESTATE_H

