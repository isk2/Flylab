<<<<<<< HEAD:ros/patterngen/srv_gen/cpp/include/patterngen/SrvSignal.h
/* Auto-generated by genmsg_cpp for file /home/flybowl/ros_workspace/git/Flyatar2/ros/patterngen/srv/SrvSignal.srv */
=======
/* Auto-generated by genmsg_cpp for file /home/ssafarik/git/Flylab/patterngen/srv/SrvSignal.srv */
>>>>>>> 9c1a4a3c2e4737d1e04dc78a9ac15ef164e80ec7:patterngen/srv_gen/cpp/include/patterngen/SrvSignal.h
#ifndef PATTERNGEN_SERVICE_SRVSIGNAL_H
#define PATTERNGEN_SERVICE_SRVSIGNAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PointStamped.h"



namespace patterngen
{
template <class ContainerAllocator>
struct SrvSignalRequest_ {
  typedef SrvSignalRequest_<ContainerAllocator> Type;

  SrvSignalRequest_()
  : pts()
  {
  }

  SrvSignalRequest_(const ContainerAllocator& _alloc)
  : pts(_alloc)
  {
  }

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _pts_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  pts;


private:
  static const char* __s_getDataType_() { return "patterngen/SrvSignalRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "10c05c93c5f6a3aefe8dc6f74c9e4e6e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "c65831cfc75934a57ad2ea7816766ecf"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PointStamped pts\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, pts);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, pts);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(pts);
    return size;
  }

  typedef boost::shared_ptr< ::patterngen::SrvSignalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patterngen::SrvSignalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvSignalRequest
typedef  ::patterngen::SrvSignalRequest_<std::allocator<void> > SrvSignalRequest;

typedef boost::shared_ptr< ::patterngen::SrvSignalRequest> SrvSignalRequestPtr;
typedef boost::shared_ptr< ::patterngen::SrvSignalRequest const> SrvSignalRequestConstPtr;


template <class ContainerAllocator>
struct SrvSignalResponse_ {
  typedef SrvSignalResponse_<ContainerAllocator> Type;

  SrvSignalResponse_()
  : success(false)
  {
  }

  SrvSignalResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "patterngen/SrvSignalResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "c65831cfc75934a57ad2ea7816766ecf"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::patterngen::SrvSignalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patterngen::SrvSignalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvSignalResponse
typedef  ::patterngen::SrvSignalResponse_<std::allocator<void> > SrvSignalResponse;

typedef boost::shared_ptr< ::patterngen::SrvSignalResponse> SrvSignalResponsePtr;
typedef boost::shared_ptr< ::patterngen::SrvSignalResponse const> SrvSignalResponseConstPtr;

struct SrvSignal
{

typedef SrvSignalRequest Request;
typedef SrvSignalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SrvSignal
} // namespace patterngen

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::patterngen::SrvSignalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::patterngen::SrvSignalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::patterngen::SrvSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "10c05c93c5f6a3aefe8dc6f74c9e4e6e";
  }

  static const char* value(const  ::patterngen::SrvSignalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x10c05c93c5f6a3aeULL;
  static const uint64_t static_value2 = 0xfe8dc6f74c9e4e6eULL;
};

template<class ContainerAllocator>
struct DataType< ::patterngen::SrvSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "patterngen/SrvSignalRequest";
  }

  static const char* value(const  ::patterngen::SrvSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::patterngen::SrvSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped pts\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::patterngen::SrvSignalRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::patterngen::SrvSignalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::patterngen::SrvSignalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::patterngen::SrvSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::patterngen::SrvSignalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::patterngen::SrvSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "patterngen/SrvSignalResponse";
  }

  static const char* value(const  ::patterngen::SrvSignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::patterngen::SrvSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::patterngen::SrvSignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::patterngen::SrvSignalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::patterngen::SrvSignalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pts);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvSignalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::patterngen::SrvSignalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvSignalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<patterngen::SrvSignal> {
  static const char* value() 
  {
    return "c65831cfc75934a57ad2ea7816766ecf";
  }

  static const char* value(const patterngen::SrvSignal&) { return value(); } 
};

template<>
struct DataType<patterngen::SrvSignal> {
  static const char* value() 
  {
    return "patterngen/SrvSignal";
  }

  static const char* value(const patterngen::SrvSignal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<patterngen::SrvSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c65831cfc75934a57ad2ea7816766ecf";
  }

  static const char* value(const patterngen::SrvSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<patterngen::SrvSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "patterngen/SrvSignal";
  }

  static const char* value(const patterngen::SrvSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<patterngen::SrvSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c65831cfc75934a57ad2ea7816766ecf";
  }

  static const char* value(const patterngen::SrvSignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<patterngen::SrvSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "patterngen/SrvSignal";
  }

  static const char* value(const patterngen::SrvSignalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PATTERNGEN_SERVICE_SRVSIGNAL_H

